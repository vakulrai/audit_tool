<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\user\Entity\User;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Datetime\DateTimePlus;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Field\FieldFilteredMarkup;

/**
 * Implements hook_form_alter().
 */
function aps_audit_planning_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#cache']['max-age'] = 0;
	$form['field_sections']['#attributes'] = ['id' => ['section']];
  $form['field_shift']['#attributes'] = ['id' => ['title_test']];
	if($form_id == 'node_planned_events_form' || $form_id == 'node_planned_events_edit_form'){
	  $form['field_department']['widget']['#ajax'] = [
      'callback' => 'getSectionfromdepartment',
      'wrapper' => 'section',
      'event' => 'change',
    ];

    $form['field_auditor']['widget']['#ajax'] = [
      'callback' => 'getUserINfo',
      'wrapper' => 'user-details',
      'event' => 'change',
    ];

    $form['field_auditor']['user_details'] = [
       '#attributes' => ['id' => 'user-details'],
      '#markup' => '',
      '#type' => 'container',
    ];
	}
  if($form_id == 'node_planned_events_form'){
    if($start_date = \Drupal::request()->query->get('field_start_date') && $end_date = \Drupal::request()->query->get('field_end_date')){
      $start_date = \Drupal::request()->query->get('field_start_date');
      $end_date = \Drupal::request()->query->get('field_end_date');
      $title = \Drupal::request()->query->get('title');
      $get_user_timezone =  drupal_get_user_timezone();

      $start_date_obj = new \DateTime($start_date , new \DateTimeZone('UTC'));
      $start_date_obj->setTimezone(new \DateTimeZone($get_user_timezone));
      $start_date_timestamp = $start_date_obj->getTimestamp();
      $start_date_timestamp_object = DrupalDateTime::createFromTimestamp($start_date_timestamp, $get_user_timezone);

      $end_date_obj = new \DateTime($end_date , new \DateTimeZone('UTC'));
      $end_date_obj->setTimezone(new \DateTimeZone($get_user_timezone));
      $end_date_timestamp = $end_date_obj->getTimestamp();
      $end_date_timestamp_object = DrupalDateTime::createFromTimestamp($end_date_timestamp, $get_user_timezone);

      //Alter the start and end date.
      $form['field_start_date']['widget'][0]['value']['#default_value'] = $start_date_timestamp_object;
      $form['field_end_date']['widget'][0]['value']['#default_value'] = $end_date_timestamp_object;
      $form['field_time']['widget'][0]['value']['#default_value'] = $start_date_timestamp_object;
      $form['field_time']['widget'][0]['end_value']['#default_value'] = $end_date_timestamp_object;
      $form['title']['widget'][0]['value']['#title'] = t('Audit Reference');
      $form['title']['widget'][0]['value']['#default_value'] = $title;
      $form['title']['#disabled'] = TRUE;

      //Alter for shift field.
      $form['field_select_audit']['widget']['#ajax'] = [
        'callback' => 'getShift',
        'wrapper' => 'title_test',
        'event' => 'change',
      ];
      $form['field_shift']['widget']['#default_value'] = [4, 1];
    }
  }
}

function getSectionfromdepartment(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_department'))){
  	$department_array = $form_state->getValue('field_department')[0];
  	$key = $department_array['target_id'];
    $form['field_sections']['widget']['#options'] = getSectionDropdownOptions($key);
   }
   return $form['field_sections'];
}

function getShift(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_select_audit'))){
    $department_array = $form_state->getValue('field_select_audit')[0];
    $key = $department_array['target_id'];
    $node_object_event = Node::load($key);
    $get_unit = $node_object_event->get('field_unit')->target_id;
    $node_object_unit = Node::load($get_unit);
    $get_shift_option = $node_object_unit->get('field_shift')->getValue();
    foreach ($get_shift_option as $key => $value) {
       $options[$value['target_id']] = FieldFilteredMarkup::create($value['target_id']);
     }
    $form['field_shift']['widget']['#default_value'] = [4, 1];
   }
   return $form['field_shift'];
}

function getUserINfo(array $form, FormStateInterface $form_state) {
  // $ajax_response = new AjaxResponse();
  if($form_state->getValue('field_auditor')[0]){
    $user_array = $form_state->getValue('field_auditor')[0];
    $uid = $user_array['target_id'];
    $user_object = User::load($uid);
    $fields = $user_object->toArray();
    foreach ($fields as $key => $value) {
      $count_values = count($value);
      $property = isset($value[0]['value']) ? 'value' : 'target_id';
      if (!empty($value[0][$property])) {
        if($count_values > 1){
          foreach ($value as $no => $name) {
            $profile[$key][$no] = $value[$no][$property];
          }
        }
        else{
          $profile[$key] = $value[0][$property];
        }
      }
    }
    
    if($user_function = Paragraph::load($profile['field_functions'])){
      $score = $user_function->get('field_score')->value;
      $user_score = $score;
    }
    else{
      $user_score = "Not Available";
    }

    $form['user_details'] = array(
      '#type' => 'fieldset', 
      '#title' => t('User Details'), 
       '#attributes' => ['id' => 'user-details'], 
      '#collapsible' => TRUE, 
      '#collapsed' => FALSE,
    );

    $form['user_details']['data'] = array(
      '#type' => 'table',
      '#header' => array(
          t('Name'),
          t('Score'),
          t('Verify'),
      ),
    );

   $form['user_details']['data'][0]['name'] = array(
      '#type' => 'item',
      '#title' => t('Name'),
      '#markup' => $profile['name'],
      '#title_display' => 'invisible',
    );
    $form['user_details']['data'][0]['score'] = array(
      '#type' => 'item',
      '#title' => t('Score'),
      '#markup' => $user_score,
      '#title_display' => 'invisible',
    );
    $form['user_details']['data'][0]['verify'] = array(
      '#type' => 'checkbox',
      '#required' => TRUE,
      '#title' => t('Verify'),
      '#title_display' => 'invisible',
    );
   }
   return $form['user_details'];
   // return $ajax_response;
}

function getSectionDropdownOptions($key = '') {
	if($key){
	  $query = \Drupal::database()->select('node_field_data', 'n');
	  $query->join('node__field_refere', 'rf', 'n.nid = rf.field_refere_target_id');
	  $query->fields('rf',['entity_id', 'bundle']);
	  $query->condition('rf.bundle', 'section');
	  $query->condition('rf.field_refere_target_id', $key);
	  $nids = $query->execute()->fetchAll();
	}
    
    $entity_title['_none'] = "- None -";
    foreach ($nids as $entity) {
      $node_object = Node::load($entity->entity_id);
      $entity_title[$node_object->get('nid')->value] = $node_object->get('title')->value;
    }
    return $entity_title;
  }
?>