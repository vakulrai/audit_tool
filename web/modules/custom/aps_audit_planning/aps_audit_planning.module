<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\user\Entity\User;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Datetime\DateTimePlus;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Ajax\ChangedCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Url;


/**
* Implements hook_mail().
*/
function aps_audit_planning_mail($key, &$message, $params) {
 $options = [
   'langcode' => $message['langcode'],
 ];
 switch ($key) {
   case 'audit-planning':
     $message['from'] = \Drupal::config('system.site')->get('mail');
     $message['subject'] = $params['subject'];
     $message['body'] = $params['body'];
     $message['message'] = $params['message'];
     break;
 }
}

/**
 * Implements hook_form_alter().
 */
function aps_audit_planning_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  global $base_url;
  $id = \Drupal::request()->query->get('unit_reference');
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  foreach ($roles as $key => $value) {
    $user_role = $value;
  }
	if($form_id == 'node_planned_events_form' || $form_id == 'node_planned_events_edit_form'){
    $form['field_report_reference']['#access'] = FALSE;
    $form['field_select_users']['#access'] = FALSE;
    $form['field_time']['#access'] = FALSE;
    $form['field_year_frequency']['#access'] = FALSE;
    $form['field_release_status']['#access'] = FALSE;
    $form['field_total_mandays']['#access'] = FALSE;
    $form['field_pre_audit_status']['#access'] = FALSE;
    $form['field_refere']['#access'] = FALSE;
    $form['#cache']['max-age'] = 0;
    $form['field_select_auditee']['#attributes'] = ['id' => ['auditee']];
    $form['field_sections']['#attributes'] = ['id' => ['section']];
    $form['field_checklist']['#attributes'] = ['id' => ['checklist']];
    $form['field_shift']['#attributes'] = ['id' => ['shift']];
    $form['field_internal_audit_type']['#attributes'] = ['id' => ['audit-type']];
    $form['field_available_procedures']['#attributes'] = ['id' => ['procedure-type']];
    $get_department_options = getDepartmenttypeUnderunit('department', $id);
    $form['field_department']['widget']['#options'] = $get_department_options;

    $form['field_audit_type']['widget']['#ajax'] = [
      'callback' => 'changeAuditeeOptions',
      'wrapper' => 'auditee',
      'event' => 'change',
    ];

	  $form['field_department']['widget']['#ajax'] = [
      'callback' => 'getSectionfromdepartment',
      'wrapper' => 'section',
      'event' => 'change',
    ];

    $form['field_list_of_systems']['widget']['#ajax'] = [
      'callback' => 'getChecklist',
      'wrapper' => 'checklist',
      'event' => 'change',
    ];
    
    $form['field_auditor']['#states'] = [
      'visible' => [
        'select[name="field_audit_type"]' => ['value' => 'internal'],
      ],
      'required' => [
        'select[name="field_audit_type"]' => ['value' => 'internal'],
      ],
    ];

    $form['field_auditor']['widget']['#ajax'] = [
      'callback' => 'getUserINfo',
      'wrapper' => 'user-details',
      'event' => 'change',
    ];

    $form['field_auditor']['user_details'] = [
      '#attributes' => ['id' => 'user-details'],
      '#markup' => '',
      '#type' => 'container',
    ];
    
    if($id){
      $unit_ref_object = Node::load($id);
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
        $title = $form['field_shift']['widget']['#options'][$value['target_id']];
        $selected_option[$value['target_id']] = $title; 
      }
      $form['field_shift']['widget']['#options'] = $selected_option;
      $form['field_shift']['widget']['#default_value'] = $def_values;
      $form['field_shift']['widget']['#disabled'] = TRUE;
    }
    $form['field_refere']['#access'] = FALSE;
	}

  if($form_id == 'node_planned_events_form' || $form_id == 'node_planned_events_edit_form'){
    if($start_date = \Drupal::request()->query->get('field_start_date') && $end_date = \Drupal::request()->query->get('field_end_date')){
      $start_date = \Drupal::request()->query->get('field_start_date');
      $end_date = \Drupal::request()->query->get('field_end_date');
      $title = \Drupal::request()->query->get('title');
      $get_user_timezone =  drupal_get_user_timezone();
      
      //Logic to set start date as first date of current month.
      // $start_date_array = explode('-', $start_date);
      // $format_for_first_day = 'Y-'. $start_date_array[1] . '-01';
      // $format_for_last_day = 'Y-m-t';
      // $start_date = date($format_for_first_day);
      // $end_date= date($format_for_last_day);

      $start_date_obj = new \DateTime($start_date , new \DateTimeZone('UTC'));
      $start_date_obj->setTimezone(new \DateTimeZone($get_user_timezone));
      $start_date_timestamp = $start_date_obj->getTimestamp();
      $start_date_timestamp_object = DrupalDateTime::createFromTimestamp($start_date_timestamp, $get_user_timezone);

      $end_date_obj = new \DateTime($end_date , new \DateTimeZone('UTC'));
      $end_date_obj->setTimezone(new \DateTimeZone($get_user_timezone));
      $end_date_timestamp = $end_date_obj->getTimestamp();
      $end_date_timestamp_object = DrupalDateTime::createFromTimestamp($end_date_timestamp, $get_user_timezone);

      //Alter the start and end date.
      $form['field_start_date']['widget'][0]['value']['#default_value'] = $start_date_timestamp_object;
      $form['field_end_date']['widget'][0]['value']['#default_value'] = $end_date_timestamp_object;
      $form['field_time']['widget'][0]['value']['#default_value'] = $start_date_timestamp_object;
      $form['field_time']['widget'][0]['end_value']['#default_value'] = $end_date_timestamp_object;
      $form['title']['widget'][0]['value']['#title'] = t('Audit Reference');
      $form['title']['widget'][0]['value']['#default_value'] = $title;
      $form['title']['#disabled'] = TRUE;
      
      //Alter the internal audit field
       $form['field_audit_type']['widget']['#ajax'] = [
        'callback' => 'getAuditSubCategory',
        'wrapper' => 'audit-type',
        'event' => 'change',
      ];

      //Alter for shift field.
      // $form['field_select_audit']['widget']['#ajax'] = [
      //   'callback' => 'getShift',
      //   'wrapper' => 'shift',
      //   'event' => 'change',
      // ];

      //Alter if = system is selected
      // $form['field_internal_audit_type']['widget']['#ajax'] = [
      //   'callback' => 'getProcedures',
      //   'wrapper' => 'details',
      //   'event' => 'change',
      // ];
      // // $form['field_internal_audit_type']['widget']['#disabled'] = TRUE;

      // $form['field_internal_audit_type']['audit_type_details'] = [
      //   '#attributes' => ['id' => 'details'],
      //   '#markup' => '',
      //   '#type' => 'container',
      // ];
    }
    if($user_role == 'auditor' || $user_role == 'auditee'){
      $entity_type_id = 'node';
      $bundle = 'planned_events';
      foreach (\Drupal::entityManager()->getFieldDefinitions($entity_type_id, $bundle) as $field_name => $field_definition) {
        if (!empty($field_definition->getTargetBundle())) {
          $bundleFields[$field_name]['type'] = $field_definition->getType();
          $bundleFields[$field_name]['label'] = $field_definition->getLabel();
          $form[$field_name]['#disabled'] = TRUE;
          if($field_name == 'field_suggested_date' || $field_name == 'moderation_state'){
            $form[$field_name]['#disabled'] = FALSE;
          }
        }
      }
    }
  }
  if($form_id == 'node_planned_events_form'){
    if($id = \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    // $form['field_suggested_date']['#access'] = FALSE;
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'planned_event_redirect';
      }
    }
  }
  if($form['#id'] == 'views-exposed-form-customer-manual-parts-product-listing'){
     $form['title']['#autocomplete_route_name'] = 'aps_audit_planning.title_list';
  }
  if($form_id == 'node_procedures_form'){
    $form['field_section_type']['#attributes'] = ['id' => ['sections']];
    $form['field_department']['#attributes'] = ['id' => ['department']];
    $form['field_business_process']['widget']['#ajax'] = [
      'callback' => 'getSectionfromdepartmentDept',
      'wrapper' => 'department',
      'event' => 'change',
    ];

    $form['field_department']['widget']['#ajax'] = [
      'callback' => 'getSectionfromdepartmentProcedure',
      'wrapper' => 'sections',
      'event' => 'change',
    ];
  }
  if ($form_id == 'node_planned_events_edit_form'){
    if($user_role == 'auditor' || $user_role == 'auditee'){
      $form['field_audit_reasons']['#access'] = FALSE;
      $form['field_proceed_with_audit']['#access'] = FALSE;
    }
    $form['field_shift']['widget']['#options'] = $form['field_shift']['widget']['#options'];
    $form['field_unit_reference']['#access'] = FALSE;
    $schedule_type = \Drupal::request()->query->get('schedule_type');
    if($schedule_type == 'reschedule'){
      $config_factory = \Drupal::configFactory();
      $config = $config_factory->getEditable('aps_audit_planning.mandaysettings');
      $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
      $uri = explode('/', $current_uri);
      $query = \Drupal::database()->select('content_moderation_state_field_data', 'n');
      $query->fields('n',['content_entity_revision_id', 'moderation_state']);
      $query->condition('n.moderation_state', 'release_audit');
      $query->condition('n.content_entity_id', $uri[1]);
      $vid = $query->execute()->fetchAll();
      $node_revison_load = node_revision_load($vid[0]->content_entity_revision_id);
      $update_mandays_from_rev = $node_revison_load->field_total_mandays->value;
      $audit_type =  $node_revison_load->field_internal_audit_type->value;
      if($audit_type = 'systems'){
        $config_to_use = 'system_mandays_updated';
      }elseif ($audit_type = 'process') {
        $config_to_use = 'process_mandays_updated';
      }
      elseif ($audit_type = 'product') {
       $config_to_use = 'product_mandays_updated';
      }
      $get_mandays_from_config = $config->get($config_to_use);
      $config->set($config_to_use,  $get_mandays_from_config + $update_mandays_from_rev);
      $config->save();
      $form['moderation_state']['widget'][0]['state']['#default_value'] = 'reschedule';
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'notify_on_reschedule';
        }
      }
    }
    $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
    $uri = explode('/', $current_uri);
    if(is_numeric($uri[1])){
      $node_object = Node::load($uri[1]);
      if($node_object->get('moderation_state')->value == 'scheduled' || $node_object->get('moderation_state')->value == 'reschedule'){
        if($schedule_type == ''){
          $form['actions']['release_audit'] = array(
          '#type' => 'submit',
          '#weight' => 999,
          '#limit_validation_errors' => array() ,
          '#button_type' => 'submit',
          '#submit' => array(
            'releaseAuditCallback'
          ),
          '#attributes' => [
            'class' => [
              'use-ajax',
            ],
          ],
          '#value' => t('Release Audit') ,
        );
        }
      }
    }
  }
}

function getSectionfromdepartment(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_department'))){
  	$department_array = $form_state->getValue('field_department')[0];
  	$key = $department_array['target_id'];
    $form['field_sections']['widget']['#options'] = getSectionDropdownOptions($key);
   }
   return $form['field_sections'];
}

function getChecklist(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_list_of_systems'))){
    $system_array = $form_state->getValue('field_list_of_systems')[0];
    $key = $system_array['target_id'];
    $form['field_checklist']['widget']['#options'] = getChecklistData($key);
   }
   return $form['field_checklist'];
}

function changeAuditeeOptions(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_audit_type'))){
    $audit_array = $form_state->getValue('field_audit_type')[0];
    $key = $audit_array['value'];
    if($key == 'external' || $key == 'supplier' || $key == 'customer'){
      $form['field_select_auditee']['widget']['#title'] = 'Select MR';
      $form['field_select_auditee']['widget']['#options'] = getMRlist($key);
      $form['field_select_auditee']['widget']['#default_value'] = '_none';
    }
   }
   return $form['field_select_auditee'];
}

// function disableAuditorfield(array $form, FormStateInterface $form_state) {

//   if(count($form_state->getValue('field_audit_type'))){
//     $audit_array = $form_state->getValue('field_audit_type')[0];
//     $key = $audit_array['value'];
//     if($key == 'internal' || $key == 'supplier' || $key == 'customer'){
//       $form['field_auditor']['widget']['#required'] = FALSE;
//     }
//    }
//    return $form['field_auditor'];
// }

function getSectionfromdepartmentProcedure(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_department'))){
    $department_array = $form_state->getValue('field_department')[0];
    $key = $department_array['target_id'];
    $form['field_section_type']['widget']['#options'] = getSectionDropdownOptions($key);
   }
   return $form['field_section_type'];
}

function getSectionfromdepartmentDept(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_business_process'))){
    $department_array = $form_state->getValue('field_business_process')[0];
    $key = $department_array['target_id'];
    $form['field_department']['widget']['#options'] = getDeptDropdownOptions($key);
   }
   return $form['field_department'];
}

function getAuditSubCategory(array $form, FormStateInterface $form_state) {
  $ajax_response = new AjaxResponse();
  if(count($form_state->getValue('field_audit_type'))){
    if($form_state->getValue('field_audit_type')[0]['value'] == 'internal'){
       $ajax_response->addCommand(new InvokeCommand('#edit-field-internal-audit-type', 'attr', array('disabled', false)));
    }
  }
  if($form_state->getValue('field_audit_type')[0]['value'] == ''){
     $ajax_response->addCommand(new InvokeCommand('#edit-field-internal-audit-type', 'attr', array('disabled', true)));
  }
  return $ajax_response;
}

function getProcedures(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_internal_audit_type'))){
    $type = $form_state->getValue('field_internal_audit_type')[0]['value'];
    switch ($type) {
      case 'systems':
        $url = '/internal-audit-systems-export';
        $options = getAuditOPtions($type, $url);
        break;

      case 'process':
        $url = '/internal-audit-process-export';
        $options = getAuditOPtions($type, $url);
        break;

      case 'product':
        $url = '/internal-audit-product-export';
        $options = getAuditOPtions($type, $url);
        break;
      
      default:

        break;
    }

    $form['audit_type_details'] = array(
        '#type' => 'fieldset', 
        '#title' => t('Audit Details'), 
        '#attributes' => ['id' => 'details'], 
        '#collapsible' => TRUE, 
        '#collapsed' => FALSE,
      );

    $form['audit_type_details']['details'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#required' => TRUE,
      '#title' => t('List of '. $type),
      );
  }

  return $form['audit_type_details'];
}

function getShift(array $form, FormStateInterface $form_state) {
  // $ajax_response = new AjaxResponse();
  // $vid = 'shift';
  // $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  // foreach ($terms as $term) {
  //  $term_id = 'edit-field-shift-'.$term->tid;
  //  $ajax_response->addCommand(new InvokeCommand('#'.$term_id, 'attr', array('checked', false)));
  // }
  // if(count($form_state->getValue('field_select_audit'))){
  //   // $department_array = $form_state->getValue('field_select_audit')[0];
  //   // $key = $department_array['target_id'];
  //   $id = \Drupal::request()->query->get('unit_reference');
  //   $node_object_event = Node::load($id);
  //   $get_unit = $node_object_event->get('field_unit')->target_id ? $node_object_event->get('field_unit')->target_id : '';
  //   $node_object_unit = Node::load($get_unit);
  //   $get_shift_option = $node_object_unit->get('field_shift')->getValue() ? $node_object_unit->get('field_shift')->getValue() : '';
  //   foreach ($get_shift_option as $key => $value) {
  //     $id = 'edit-field-shift-'.$value['target_id'];
  //     $ajax_response->addCommand(new InvokeCommand('#'.$id, 'attr', array('checked', true)));
  //    }
  //  }
  //  return $ajax_response;
}

function getUserINfo(array $form, FormStateInterface $form_state) {
  // $ajax_response = new AjaxResponse();
  if($form_state->getValue('field_auditor')[0]){
    $user_array = $form_state->getValue('field_auditor')[0];
    $uid = $user_array['target_id'];
    $user_object = User::load($uid);
    $fields = $user_object->toArray();
    foreach ($fields as $key => $value) {
      $count_values = count($value);
      $property = isset($value[0]['value']) ? 'value' : 'target_id';
      if (!empty($value[0][$property])) {
        if($count_values > 1){
          foreach ($value as $no => $name) {
            $profile[$key][$no] = $value[$no][$property];
          }
        }
        else{
          $profile[$key] = $value[0][$property];
        }
      }
    }
    
    if($user_function = Paragraph::load($profile['field_functions'])){
      $score = $user_function->get('field_score')->value;
      $user_score = $score;
    }
    else{
      $user_score = "Not Available";
    }

    $form['user_details'] = array(
      '#type' => 'fieldset', 
      '#title' => t('User Details'), 
       '#attributes' => ['id' => 'user-details'], 
      '#collapsible' => TRUE, 
      '#collapsed' => FALSE,
    );

    $form['user_details']['data'] = array(
      '#type' => 'table',
      '#header' => array(
          t('Name'),
          t('Score'),
          t('Verify'),
      ),
    );

   $form['user_details']['data'][0]['name'] = array(
      '#type' => 'item',
      '#title' => t('Name'),
      '#markup' => $profile['name'],
      '#title_display' => 'invisible',
    );
    $form['user_details']['data'][0]['score'] = array(
      '#type' => 'item',
      '#title' => t('Score'),
      '#markup' => $user_score,
      '#title_display' => 'invisible',
    );
    $form['user_details']['data'][0]['verify'] = array(
      '#type' => 'checkbox',
      '#required' => TRUE,
      '#title' => t('Verify'),
      '#title_display' => 'invisible',
    );
   }
   return $form['user_details'];
   // return $ajax_response;
}

function getSectionDropdownOptions($key = '') {
	if($key){
	  $query = \Drupal::database()->select('node_field_data', 'n');
	  $query->join('node__field_select_department_type', 'rf', 'n.nid = rf.entity_id');
	  $query->fields('rf',['entity_id', 'bundle']);
	  $query->condition('rf.bundle', 'section');
	  $query->condition('rf.field_select_department_type_target_id', $key);
	  $nids = $query->execute()->fetchAll();
	}
    $entity_title['_none'] = "- None -";
    foreach ($nids as $entity) {
      $node_object = Node::load($entity->entity_id);
      $entity_title[$node_object->get('nid')->value] = $node_object->get('title')->value;
    }
    return $entity_title;
  }

function getDeptDropdownOptions($key = '') {
  if($key){
    $query = \Drupal::database()->select('node_field_data', 'n');
    $query->join('node__field_refere', 'rf', 'n.nid = rf.field_refere_target_id');
    $query->fields('rf',['entity_id', 'bundle']);
    $query->condition('rf.bundle', 'department');
    $query->condition('rf.field_refere_target_id', $key);
    $nids = $query->execute()->fetchAll();
  }
    
    $entity_title['_none'] = "- None -";
    foreach ($nids as $entity) {
      $node_object = Node::load($entity->entity_id);
      $entity_title[$node_object->get('nid')->value] = $node_object->get('title')->value;
    }
    return $entity_title;
}

function getAuditOPtions($type, $url) {
  global $base_url;
  if($type){
    $client = \Drupal::httpClient();
    $request = $client->get($base_url.$url);
    $response = $request->getBody();
    $data = json_decode($response);
    foreach ($data as $key => $value) {
      $options[$value->nid] = $value->title;
    }
  }
  return $options;
}

function getChecklistData($key){
  $data = [];
  $query = \Drupal::database()->select('node__field_list_of_systems', 'cm');
  $query->fields('cm',['field_list_of_systems_target_id', 'entity_id']);
  $query->condition('cm.bundle', 'internal_audit');
  $query->condition('cm.field_list_of_systems_target_id', $key);
  $nids = $query->execute()->fetchAll();
  foreach ($nids as $key => $value) {
     $title = Node::load($value->entity_id);
     $data[$value->entity_id] = $title->title->value;
  }
  return $data;
}

function getMRlist($key){
  $route_name = \Drupal::routeMatch()->getRouteName();
  if($route_name == 'entity.node.edit_form'){
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $nid = $node->id();
      $unit_reference = $node->field_refere->target_id;
    }
  }
  else{
    $unit_reference = \Drupal::request()->query->get('type');
  }

  $data = [];
  $user_count_query = \Drupal::database()->select('user__field_reference_id', 'n');
  $user_count_query->fields('n', ['field_reference_id_target_id','entity_id']);
  $user_count_query->condition('n.bundle', 'user');
  $user_count_query->condition('n.field_reference_id_target_id', $unit_reference);
  $users = $user_count_query->execute()->fetchAll();

  $data['_none'] = "- None -";
  foreach ($users as $key => $value) {
    $mr_user = User::load($value->entity_id);
    if($mr_user->roles->target_id == 'mr_admin'){
      $data[$mr_user->uid->value] = $mr_user->name->value;
    }
  }
  return $data;
}

function releaseAuditCallback(&$form, \Drupal\Core\Form\FormStateInterface &$form_state){
  $form_input_values = $form_state->getUserInput();
  $response = new AjaxResponse();
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aps_audit_planning.mandaysettings');
  $field_start_date = timestampFromDate($form_input_values['field_start_date'][0]['value']['date']);
  $field_end_date = timestampFromDate($form_input_values['field_end_date'][0]['value']['date']);
  if($uri[1]){
    $node_object = Node::load($uri[1]);
    $node_object->set('field_start_date', $field_start_date);
    $node_object->set('field_end_date', $field_end_date);
    $node_object->set('moderation_state', 'release_audit');
  }

  if($form_input_values['field_audit_type'] == 'internal' && $form_input_values['field_internal_audit_type'] == 'systems'){
    $date_difference =  abs($field_end_date - $field_start_date);
    $years = floor($date_difference / (365*60*60*24));
    $months = floor(($date_difference - $years * 365*60*60*24) / (30*60*60*24));
    $total_mandays = floor(($date_difference - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24)); 
    $get_system_mandays_from_unit = $config->get('system_mandays_updated', $total_system_mandays);
    if($get_system_mandays_from_unit >= $total_mandays ){
      $node_object->set('field_total_mandays', $total_mandays);
      $config->set('system_mandays_updated',  $get_system_mandays_from_unit - $total_mandays);
    }
    else{
      $node_object->set('field_total_mandays', 0);
      $config->set('system_mandays_updated', 0);
    }
  }
  elseif ($form_input_values['field_audit_type'] == 'internal' && $form_input_values['field_internal_audit_type'] == 'process') {
    $unit_reference = $node_object->field_refere->target_id;
    $get_total_process_assembly = count(getAuditOPtions('process','/rest-export-system/'.$unit_reference.'?type[]=assembly'));
    $get_total_process_manufacturing = count(getAuditOPtions('process','/rest-export-system/'.$unit_reference.'?type[]=manufacturing_process'));
    $total_process_mandays = getMandaysFromAuditType('process', $get_total_process_manufacturing, $get_total_process_assembly, NULL);
    $config->set('process_mandays_standard', $total_process_mandays);
    $config->set('process_mandays_updated', $total_process_mandays);
    $get_process_mandays_standard = $config->get('process_mandays_updated');
    $config->set('system_mandays_updated', $get_process_mandays_standard - $total_process_mandays);
  }
  elseif ($form_input_values['field_audit_type'] == 'internal' && $form_input_values['field_internal_audit_type'] == 'product') {
    $unit_reference = $node_object->field_refere->target_id;
    $query = \Drupal::database()->select('customer_manual_parts__field_reference_id', 'cm');
    $query->fields('cm',['field_reference_id_target_id', 'entity_id']);
    $query->condition('cm.field_reference_id_target_id', $unit_reference);
    $nids = $query->execute()->fetchAll();
    $get_total_product = count($nids);
    $total_product_mandays = getMandaysFromAuditType('product', $get_total_product, NULL, NULL);
    $config->set('product_mandays_standard', $total_product_mandays);
    $config->set('product_mandays_updated', $total_product_mandays);
    $get_product_mandays_standard = $config->get('product_mandays_updated');
    $config->set('product_mandays_updated', $get_product_mandays_standard - $total_process_mandays);
  }
  $config->save();
  $node_object->save();
  return $response;
}

function planned_event_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  //Send Mail to the Assigned Auditee And auditor About the audit.
  global $base_url;
  $form_values = $form_state->getValues();
  $id = \Drupal::request()->query->get('unit_reference');
  if(count($form_values['field_auditor']) > 0){
    $auditor = User::load($form_values['field_auditor'][0]['target_id']);
    $user_load[$form_values['field_auditor'][0]['target_id']] = $auditor->mail->value;
  }
  if(count($form_values['field_select_auditee']) > 0){
    $auditee = User::load($form_values['field_select_auditee'][0]['target_id']);
    $user_load[$form_values['field_select_auditee'][0]['target_id']] = $auditee->mail->value;
  }
  if(count($form_values['field_department']) > 0){
    $department = User::load($form_values['field_department'][0]['target_id']);
    $user_load[$form_values['field_department'][0]['target_id']] = $department->mail->value;
  }
  if(count($form_values['field_sections']) > 0){
    $sections = User::load($form_values['field_sections'][0]['target_id']);
    $user_load[$form_values['field_sections'][0]['target_id']] = $sections->mail->value;
  }
  $url_options = ['node' => $form_values['nid']];
  $audit_link = $base_url.Url::fromUserInput('/planned-audit-listing/'.$id)->toString();
  $message = 'Hi,
    You have been Assigned an Audit, Please Check your Dashboard or Go to the following Url ('.$audit_link.') form Browser, After Login.
  ';
  $subject = 'Audit Planning';
  foreach ($user_load as $user => $mails) {
    sendEmail('aps_audit_planning', 'audit-planning', $mails, $message, $subject);
    notify($user, $id , $message);
  }
  $id = \Drupal::request()->query->get('unit_reference');
  $response = Url::fromUserInput('/audit-planning/'.$id);
  $form_state->setRedirectUrl($response);
}

function notify_on_reschedule(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  global $base_url;
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  $uid = \Drupal::currentUser()->id();
  $current_user_detail = User::load($uid);
  $current_node_detail = Node::load($uri[1]);
  $user_timezone =  drupal_get_user_timezone();
  $get_current_timestamp = getCurrentTimestamp($user_timezone);
  $notifictaion_insert = \Drupal::database()->insert('notifications');
  $reschedule_link = $base_url.Url::fromRoute('entity.node.edit_form',['node' => $uri[1], 'unit_reference' => $unit_reference])->toString();
  $message = 'Following Audit has been requested to Reschedule By: <b>'.$current_user_detail->name->value.'</b><br> Follow the Audit action link.'.'<a href="'.$reschedule_link.'">Link</a>';
  $notifictaion_insert->fields([
    'nid' => $uri[1],
    'uid' => $current_node_detail->getOwner()->id(),
    'message' => $message,
    'timestamp' => $get_current_timestamp,
    'status' => 0,
  ]);
  $notifictaion_insert->execute();
}

function timestampFromDate($date){
  $user_timezone =  drupal_get_user_timezone();
  $start_date_obj = new \DateTime($date , new \DateTimeZone('UTC'));
  $start_date_obj->setTimezone(new \DateTimeZone($user_timezone));
  $start_date_timestamp = $start_date_obj->getTimestamp();
  return $start_date_timestamp;
}
?>