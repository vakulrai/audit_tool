<?php

/**
 * @file
 * Contains aps_audit_report_analysis.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Ghunti\HighchartsPHP\Highchart;
use Ghunti\HighchartsPHP\HighchartJsExpr;
/**
 * Implements hook_help().
 */
function aps_audit_report_analysis_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the aps_audit_report_analysis module.
    case 'help.page.aps_audit_report_analysis':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Contain functionality related to audit reports') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function aps_audit_report_analysis_theme($existing, $type, $theme, $path) {
  return [
    'time_analysis_block' => [
      'path' => $path . '/templates',
      'template' => 'time-analysis-block',
        'variables' => [
          'audit_effeciency' => NULL,
          'car_effeciency' => NULL,
          'audit_hours' => NULL,
          'car_hours' => NULL,
          'audit_cycle_effeciency' => NULL,
        ],
    ],
    'mradmin_dashboard_coverage' => [
      'path' => $path . '/templates',
      'template' => 'mradmin-dashboard-coverage',
        'variables' => [
          'data' => NULL,
        ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function aps_audit_report_analysis_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if($form_id == 'node_auditor_report_edit_form'){
    $form['actions']['submit_report'] = array(
      '#type' => 'submit',
      '#weight' => 999,
      '#limit_validation_errors' => array() ,
      '#button_type' => 'submit',
      '#submit' => array(
        'submit_auditee_audit'
      ) ,
      '#value' => t('Submit Report') ,
    );
  }
  
  if($form_id == 'node_auditor_report_edit_form'){
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'set_report_moderation';
      }
    }
  }
  unset($form['actions']['submit_report']['#submit'][1]);
  // kint($form['actions']);
}

function submit_auditee_audit(array$form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if($id = \Drupal::request()->query->get('event_reference')){
    $node_object = Node::load($id);
    if($node_object->field_audit_type->value == 'internal' && $node_object->field_internal_audit_type->value == 'process' || $node_object->field_internal_audit_type->value == 'systems' || $node_object->field_internal_audit_type->value == 'product'){
      if(isset($node_object->field_internal_audit_type->value)){
        $field_name = 'field_list_of_'.$node_object->field_internal_audit_type->value;
        $get_target_audit_type = $node_object->$field_name->target_id;
        $get_target_audit_type_object = Node::load($get_target_audit_type);
        $get_target_audit_type_object->set('moderation_state', 'submit_audit');
        $get_target_audit_type_object->save();
      }
    }
    $node_object->set('moderation_state', 'submit_audit');
    $node_object->save();
  }
  if($uri[1]){
    $event_reference= \Drupal::request()->query->get('event_reference');
    $unit_reference= \Drupal::request()->query->get('unit_reference');
    $node_referenced = [$event_reference, $unit_reference];
    $node_object_report = Node::load($uri[1]);
    $node_object_report->set('moderation_state', 'submit_audit');
    $node_object_report->set('field_status', 'closed');
    $node_object_report->set('field_refere', $node_referenced);
    $node_object_report->save();
  }

}

function set_report_moderation(array$form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  $node_object = Node::load($uri[1]);
  $node_object->set('field_status', 'pending');
  $node_object->save();
}

function aps_audit_report_analysis_node_access($node, $op, $account) {
 
}

function getHighchartImageExportforPDF($data,$series_title,$chart_title,$type,$report_type){  
      $chart = new Highchart();
      $chart->title = [
          'text' => $chart_title,
      ];
      $chart->xAxis->categories = [
        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
      ];
      $chart->xAxis->labels->style =[
              'fontSize' => '25px',
      ];
      $chart->yAxis->labels->style =[
              'fontSize' => '30px',
      ];
      $chart->yAxis->title =[
              'text' => 'Underscore Auditor',
      ];
      $chart->plotOptions = [
            "line"=> [
                "stacking"=> "normal",
                "dataLabels"=> [
                    "enabled"=> "true",
                    'style' => [
                        'fontSize'=>'20px'
                      ],
                ],
            ],
      ];
      $chart->credits = [
          'enabled' => false,
      ];
      $chart->series[] = [
          'name' => $series_title,
          'type' => $type,
          'data' => $data,
          'showInLegend' => true,
      ];
      $img_option = $chart->renderOptions();
      $exportUrl = 'http://export.highcharts.com/';
      $ch = curl_init( $exportUrl );
      $dataArray = [
        "async" => true,
        "type" => "image/jpeg",
        "width" => 800,
        "options" => $img_option
      ];
      curl_setopt( $ch, CURLOPT_POSTFIELDS, $dataArray);
      curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
      $result = curl_exec($ch);
      curl_close($ch);
      $image_url = 'http://export.highcharts.com/'.$result;
      file_get_contents_highchart($image_url);
}

function file_get_contents_highchart($url) {
  $path = drupal_get_path('module', 'aps_audit_report_analysis') . '/highchart-images-pdf/Auditor-Performance.jpeg'; 
  $content = file_get_contents($url);
  //Store in the filesystem.
  $fp = fopen($path , "w");
  fwrite($fp, $content);
  fclose($fp);
} 