<?php

/**
 * @file
 * Contains aps_general.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\User;
use Drupal\Core\Link;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\RemoveCommand;
use Drupal\Component\Datetime\DateTimePlus;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\field\Entity\FieldStorageConfig;
use \Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Datetime\DateHelper;
use Drupal\Core\Render\Markup;
use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Database\Schema;




/**
 * Implements hook_help().
 */
function aps_general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the aps_general module.
    case 'help.page.aps_general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('General APS Functionality') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function aps_general_theme() {
  return [
    'aps_general' => [
      'render element' => 'children',
    ],
  ];
}

/*
 * Callback to Send Mail.
 */
function sendEmail($module, $type, $to_address, $message, $subject){
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = $module;
  $key = $type;
  $to = $to_address;
  $params['body'] = [t($message)];
  $params['subject'] = t($subject);
  $params['message'] = t($message);
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = true;
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  if ($result['result'] !== true) {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }
  else {
    drupal_set_message(t('Your message has been sent.'));
  }
}

/**
 * Implements hook_form_alter().
 */
function aps_general_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  //Condition for Unit Add form
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  foreach ($roles as $key => $value) {
    $user_role = $value;
  }
  $form['moderation_state']['#access'] = FALSE;
  if($form_id == 'node_unit_form'){
    $form['field_total_mandays']['#access'] = FALSE;
    $form['field_updated_mandays']['#access'] = FALSE;
    $form['title']['widget'][0]['value']['#title'] = t('Unit name');
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_general_unit_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_unit_edit_form') {
    $form['title']['widget'][0]['value']['#title'] = t('Unit name');
    $form['field_total_mandays']['#access'] = FALSE;
    $form['field_updated_mandays']['#access'] = FALSE;
  }

  //Condition for Procedure Add form
  if($form_id == 'node_procedures_form'){
    if($id = \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_department']['#attributes'] = ['id' => ['department']];
    $form['field_section_type']['#attributes'] = ['id' => ['section']];
    $get_business_options = getDepartmenttypeUnderunit('business_process', $id);
    $form['field_business_process']['widget']['#ajax'] = [
      'callback' => 'getDeptfromBP',
      'wrapper' => 'department',
      'event' => 'change',
    ];
    $form['field_department']['widget']['#ajax'] = [
      'callback' => 'getSectionfromdept',
      'wrapper' => 'section',
      'event' => 'change',
    ];
    $form['field_business_process']['widget']['#options'] = $get_business_options;
    $form['field_department']['widget']['#options'] = $get_department_options;
    $form['field_section_type']['widget']['#options'] = $get_section_options;
    $form['field_refere']['#access'] = FALSE;
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_general_procedures_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_procedures_edit_form') {
    $form['field_refere']['#access'] = FALSE;
  }
  
  //Condition for Business Add form
  if($form_id == 'node_business_process_form'){
    $form['field_refere']['#access'] = FALSE;
    if($id = \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'add_department';
      }
    }
    $form['actions']['continue_dept'] = array(
      '#type' => 'submit',
      '#weight' => 999,
      '#limit_validation_errors' => array() ,
      '#button_type' => 'submit',
      '#submit' => array(
        'aps_business_process_page_redirect'
      ) ,
      '#value' => t('Continue to Department') ,
    );

  }
  elseif ($form_id == 'node_business_process_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Department Add form
  if($form_id == 'node_department_form'){
    $form['field_refere']['#access'] = FALSE;
    if($id = \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'add_section';
      }
    }
    $form['actions']['continue_dept'] = array(
      '#type' => 'submit',
      '#weight' => 999,
      '#limit_validation_errors' => array() ,
      '#button_type' => 'submit',
      '#submit' => array(
        'aps_department_page_redirect'
      ) ,
      '#value' => t('Continue to Section') ,
    );
  }
  elseif ($form_id == 'node_department_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Section Add form
  if($form_id == 'node_section_form'){
    $form['field_refere']['#access'] = FALSE;
    if($unit_ref= \Drupal::request()->query->get('unit_ref')){
      $unit_ref_object = Node::load($unit_ref);
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
        $title = $form['field_shift']['widget']['#options'][$value['target_id']];
        $selected_option[$value['target_id']] = $title; 
      }
      $form['field_shift']['widget']['#options'] = $selected_option;
      $form['field_shift']['widget']['#default_value'] = $def_values;
      $form['field_shift']['widget']['#disabled'] = TRUE;
    }
    if($id= \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    // $form['actions']['submit']['continue_dept'] = array(
    //   '#type' => 'submit',
    //   '#weight' => 999,
    //   '#button_type' => 'submit',
    //   '#submit' => array(
    //     'aps_section_page_redirect'
    //   ) ,
    //   '#value' => t('Continue to Assembly') ,
    // );
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_section_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_section_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for External Audit Add form
  if($form_id == 'node_external_audit__form'){
    $form['field_refere']['#access'] = FALSE;
    if($unit_ref= \Drupal::request()->query->get('unit_reference')){
      $unit_ref_object = Node::load($unit_ref);
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
      }
      $form['field_shift']['widget']['#options'] = $def_values;
      $form['field_shift']['widget']['#default_value'] = $def_values;
      $form['field_shift']['widget']['#disabled'] = TRUE;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_ext_audit_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_external_audit__edit_form') {
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Clauses Add form
  if($form_id == 'node_clauses_form'){
    $form['field_refere']['#access'] = FALSE;
    if($unit_ref= \Drupal::request()->query->get('unit_reference')){
      $unit_ref_object = Node::load($unit_ref);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $unit_ref_object;
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
      }
      $form['field_shift']['widget']['#options'] = $def_values;
      $form['field_shift']['widget']['#default_value'] = $def_values;
      $form['field_shift']['widget']['#disabled'] = TRUE;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_clauses_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_clauses_edit_form') {
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Assembly Add form
  if($form_id == 'node_assembly_form'){
    $form['field_refere']['#access'] = FALSE;
    if($unit_ref= \Drupal::request()->query->get('id')){
      $unit_ref_object = Node::load($unit_ref);
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
        $title = $form['field_shift']['widget']['#options'][$value['target_id']];
        $selected_option[$value['target_id']] = $title; 
      }
      $form['field_shift']['widget']['#options'] = $selected_option;
      $form['field_shift']['widget']['#default_value'] = $def_values;
      $form['field_shift']['widget']['#disabled'] = TRUE;
    }
    if(\Drupal::request()->query->get('section_reference') && \Drupal::request()->query->get('id')){
      $section_reference= \Drupal::request()->query->get('section_reference');
      $unit_reference= \Drupal::request()->query->get('id');
      $node_referenced = [$section_reference, $unit_reference];
      $node_object= node_load_multiple($node_referenced);
      $form['field_refere']['widget']['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_assembly_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_assembly_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Manufacturing Process
  if($form_id == 'node_manufacturing_process_form'){
    $form['field_refere']['#access'] = FALSE;
    if(\Drupal::request()->query->get('section_reference') && \Drupal::request()->query->get('id')){
      $section_reference= \Drupal::request()->query->get('section_reference');
      $unit_reference= \Drupal::request()->query->get('id');
      $node_referenced = [$section_reference, $unit_reference];
      $node_object= node_load_multiple($node_referenced);
      $form['field_refere']['widget']['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_assembly_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_manufacturing_process_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  if($form_id == 'user_register_form'){
    $form['account']['notify']['#default_value'] = 1;
    $form['account']['notify']['#access'] = FALSE;
    $unit_reference = \Drupal::request()->query->get('unit_reference');
    $node_object = Node::load($unit_reference);
    $form['field_reference_id']['widget'][0]['target_id']['#default_value'] = $node_object;
    $form['field_reference_id']['#access'] = FALSE;
    $query = \Drupal::database()->select('node__field_refere', 'n');
    $query->fields('n',['entity_id']);
    $query->condition('n.bundle', 'department');
    $query->condition('n.field_refere_target_id', $unit_reference);
    $nids = $query->execute()->fetchAll();
    if($user_role == 'anonymous'){
      $form['field_department']['widget']['#access'] = FALSE;
      $form['field_functions']['widget']['#access'] = FALSE;
    }
     foreach ($nids as $i => $j) {
      $title = Node::load($j->entity_id);
      $selected_department[$j->entity_id] = $title->title->value;
     }
    $form['field_department']['widget']['#options'] = $selected_department;
    $form['#title'] = 'Add Roles';
    if($form['account']['roles']){
      $form['account']['roles']['#type'] = 'select';
    }
    if(\Drupal::request()->query->get('type') == 'default'){
      $method = 'aps_assembly_user_redirect_default';
      $form['field_functions']['#access'] = FALSE;
    }
    else{
      $method = 'aps_assembly_user_redirect_auditor';
      $form['field_functions']['#access'] = TRUE;
    }
    
    $form['account']['status']['#access'] = FALSE;
    $form['account']['name']['#weight'] = -1;
    $form['account']['name']['#title'] = t('Name');
    $value = [    
      'value' => NULL,
      'country' => "IN",
      'local_number' => NULL,
      'verified' => NULL,
      'tfa' => NULL,
    ];
    $form['field_phone']['widget'][0]['#default_value'] = $value;
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = $method;
      }
    }
  }

  if($form_id == 'node_customers_manual_edit_form'){
    $form['field_sr_no']['#access'] = FALSE;
    $form['field_version_date']['#access'] = FALSE;
    $form['title']['#access'] = FALSE;
    $form['field_version_level']['#access'] = FALSE;
  }
  elseif ($form_id == 'node_customers_manual_form') {
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_refere']['#access'] = FALSE;
    $form['field_location']['widget']['add_more']['#value'] = new TranslatableMarkup("@type", array(
       '@type' => 'Add Locations',
    ));
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'customer_add';
      }
    }
  }

  if($form_id == 'node_external_audit__form' || $form_id == 'node_external_audit__edit_form'){
    $form['field_audit_type']['#access'] = FALSE;
  }
  
  if($form_id == 'customer_manual_parts_parts_form'){
    if($nid = \Drupal::request()->query->get('id')){
      $form['field_reference_id']['widget'][0]['target_id']['#default_value'] = Node::load($nid);
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'parts_redirect';
        }
      }
    }
    $form['field_reference_id']['#access'] = FALSE;
  }
  if($form_id == 'node_business_process_form'){
    $form['field_business_process_efficienc']['widget'][0]['subform']['field_other']['#states'] = [
      'visible' => [
        'select[name="field_business_process_efficienc[0][subform][field_uom]"]' => ['value' => '73']
      ],
    ];

    $form['field_business_process_effective']['widget'][0]['subform']['field_other']['#states'] = [
      'visible' => [
        'select[name="field_business_process_effective[0][subform][field_uom]"]' => ['value' => '73']
      ],
    ];
  }
 
  if($form_id == 'customer_manual_parts_parts_form' || $form_id == 'customer_manual_parts_parts_edit_form'){
    $form['field_add_parts']['widget'][0]['top']['paragraph_type_title']['info']['#markup'] = 'Products';

    $form['field_add_parts']['widget']['add_more']['add_more_button_customer_manual_parts']['#value'] = new TranslatableMarkup("@type", array(
       '@type' => 'Add Product',
    ));
  }

  if($form_id == 'node_internal_audit_form'){
    if(\Drupal::request()->query->get('unit_reference')){
      $id = (int) \Drupal::request()->query->get('unit_reference');
      $unit_ref_object = Node::load($id);
      $unit_id = $unit_ref_object->id();
      $form['field_unit']['widget']['#default_value'] = $unit_id;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'checklist_submission';
      }
    }
   
  }
  elseif ($form_id == 'node_internal_audit_edit_form') {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    foreach ($roles as $key => $value) {
      $user_role = $value;
    }
    if($user_role == 'auditee'){
      $form['field_unit']['#access'] = FALSE;
      $form['field_ia_section']['#access'] = FALSE;
      $form['field_ia_department']['#access'] = FALSE;
      $form['field_procedure_no']['#access'] = FALSE;
      $form['field_audit_type']['#access'] = FALSE;
      $form['field_audit_date']['#access'] = FALSE;
      $form['title']['#access'] = FALSE;
    }
  }

  if($form_id == 'node_supplier_form'){
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
      $form['field_refere']['#access'] = FALSE;
    }
    $form['field_location']['widget']['add_more']['#value'] = new TranslatableMarkup("@type", array(
       '@type' => 'Add Locations',
    ));
    
    $form['field_manufactured_products']['#states'] = [
      'visible' => [
        'select[name="field_type"]' => ['value' => 'manufactured'],
      ],
    ];

    $form['field_service_product']['#states'] = [
      'visible' => [
        'select[name="field_type"]' => ['value' => 'service'],
      ],
    ];
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'supplier_add';
      }
    }
  }
  elseif ($form_id == 'node_supplier_edit_form') {
    $form['field_location']['widget']['add_more']['#value'] = new TranslatableMarkup("@type", array(
       '@type' => 'Add Locations',
    ));
    $form['field_manufactured_products']['#states'] = [
      'visible' => [
        'select[name="field_type"]' => ['value' => 'manufactured'],
      ],
    ];

    $form['field_service_product']['#states'] = [
      'visible' => [
        'select[name="field_type"]' => ['value' => 'service'],
      ],
    ];
    $form['field_refere']['#access'] = FALSE;
  }
  if($form_id == 'holidays_holidays_form'){
    $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
    $query_parameters = UrlHelper::parse($current_uri);
    $uri = explode('=', $query_parameters['query']['unit_reference']);
    if($uri[1]){
      $id = $uri[1];
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
  }
}
/**
 * Implements  hook_entity_insert().
 */
function aps_general_node_insert(Node $node) {
  $current_user = \Drupal::currentUser();
  $current_user_id = $current_user->id();
  $roles = $current_user->getRoles();
  foreach ($roles as $key => $value) {
    $user_role = $value;
  }
  $node->setPublished(TRUE);
  $node->save();
  if($node->bundle() == 'assembly'){
    $title = $node->get('title')->value;
    $term = Term::create([
      'name' => $title, 
      'vid' => 'assembly_type',
    ])->save();
  }
  if($node->bundle() == 'auditor_report'){
    $message = 'Audit report Has been Sumbitted Successfully.';
    notify($id=NULL,$node->id(), $message);
  }
  if($node->bundle() == 'unit'){
    // $title = $node->get('title')->value;
    // $field_address = $node->get('field_address')->locality;
    // $field_remote_location = $node->get('field_remote_address')->locality;
    
    // $vid_to_check = strtolower(preg_replace('/\s+/', '_', $title));
    // $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple();
    // if(!isset($vocabularies[$vid_to_check])){
    //   $vocabulary = Vocabulary::create([
    //     'vid' => $vid_to_check,
    //     'description' => 'Vocabluary for '.$title,
    //     'name' => 'Vocabulary for ' .$title,
    //   ])->save();
    // }

    // $term = Term::create([
    //   'name' => 'Location', 
    //   'vid' => $vid_to_check,
    // ]);
    // $inserted_or_updated = $term->save();
    // $tid = $term->id();

    // $term_location = Term::create([
    // 'name' => $field_address, 
    // 'vid' => $vid_to_check,
    // 'parent' => [$tid],
    // ]);
    // $inserted_or_updated_location = $term_location->save();
    // $tid_location = $term_location->id();

    // $term_location_remote = Term::create([
    //   'name' => $field_remote_location, 
    //   'vid' => $vid_to_check,
    //   'parent' => [$tid],
    // ])->save();

    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('aps_general.unitregistration');
    $config->set('unit_registered', $node->id());
    $config->save(TRUE);

  }
  if($node->bundle() == 'business_process'){
    $bp_title = $node->get('title')->value;
    $vid_bp = preg_replace('/\s+/', '_', $bp_title);
    //UNit reference
    $unit_id = \Drupal::request()->query->get('id');
    $unit_object = Node::load($unit_id);
    $unit_title = $unit_object->get('title')->value;
    $vid_unit = strtolower(preg_replace('/\s+/', '_', $unit_title));
    $head_name = $node->get('field_business_head_name')->value;
    $term = Term::create([
      'name' => 'Business Process', 
      'vid' => $vid_unit,
    ]);

    $inserted_or_updated = $term->save();
    $tid = $term->id();

    $term = Term::create([
      'name' => $head_name, 
      'vid' => $vid_unit,
      'parent' => [$tid],
    ])->save();
  }
  if($node->bundle() == 'internal_audit'){
    $node->set('moderation_state', 'pre_audit');
    $node->save();
  }
  if($node->bundle() == 'customers_manual'){
    $node->set('moderation_state', 'published');
    $node->save();
  }
  if($node->bundle() == 'planned_events'){
    $unit_reference = \Drupal::request()->query->get('unit_reference');
    $entity = getPlannedEventCount($unit_reference);
    $node_load_multiple = Node::loadMultiple($entity);
    $count_systems = 0;
    $count_process = 0;
    $count_product = 0;
    $count_external = 0;
    $count_supplier = 0;
    $count_ia = 0;
    $count_ea = 0;
    $audit_frequency = getListofMonths($unit_reference);
    foreach ($node_load_multiple as $key => $value) {
      if($value->field_audit_type->value == 'internal' && $value->field_internal_audit_type->value == 'systems'){
        $id_system[] = $key; 
        $count_systems = count($id_system);
      }
      elseif ($value->field_audit_type->value == 'internal' && $value->field_internal_audit_type->value == 'process') {
        $id_process[] = $key; 
        $count_process = count($id_process);
      }
      elseif ($value->field_audit_type->value == 'internal' && $value->field_internal_audit_type->value == 'product') {
        $id_product[] = $key; 
        $count_product = count($id_product);
      }
      elseif ($value->field_audit_type->value == 'external') {
        $id_external[] = $key; 
        $count_external = count($id_external);
      }
      elseif ($value->field_audit_type->value == 'supplier') {
        $id_supplier[] = $key; 
        $count_supplier = count($id_supplier);
      }
      elseif ($value->field_audit_type->value == 'customer' && $value->field_customer_type->value == 'internal_assessment') {
        $id_ia[] = $key; 
        $count_ia = count($id_ia);
      }
      elseif ($value->field_audit_type->value == 'customer' && $value->field_customer_type->value == 'external_assessment') {
        $id_ea[] = $key; 
        $count_ea = count($id_ea);
      }
      else{
        $title_val = 'Systems Audit';
      }
    }
    
    if($node->field_audit_type->value == 'internal'){
      if($node->field_internal_audit_type->value == 'systems'){
        $val = $count_systems;
        $title_val = 'IS'.$val.'-D-'.$audit_frequency;
      }
      elseif ($node->field_internal_audit_type->value == 'process') {
        $val = $count_process;
        $title_val = 'IP'.$val.'-D-'.$audit_frequency;
      }
      elseif ($node->field_internal_audit_type->value == 'product') {
        $val = $count_product;
        $title_val = 'IPR'.$val.'-D-'.$audit_frequency;
      }
      else{
        $title_val = 'Systems Audit';
      }
    }
    elseif ($node->field_audit_type->value == 'external') {
      $val = $count_external;
      $title_val = 'EA'.$val.'-E-'.$audit_frequency;
    }
    elseif ($node->field_audit_type->value == 'supplier') {
      $val = $count_supplier;
      $title_val = 'S'.$val.'-S-'.$audit_frequency;
    }
    elseif ($node->field_audit_type->value == 'customer') {
      if($node->field_customer_type->value == 'internal_assessment'){
        $val = $count_ia;
        $title_val = 'ICA'.$val.'-C-IA-'.$audit_frequency;
      }
      elseif ($node->field_customer_type->value == 'external_assessment') {
        $val = $count_ea;
        $title_val = 'ECA'.$val.'-C-EA-'.$audit_frequency;
      }
    }
    else{
        $title_val = 'Systems Audit';
      }
    $node->set('field_year_frequency', $audit_frequency);
    $node->set('title', $title_val);
    $node->set('moderation_state', 'scheduled');
    $node->save();
  }
}

function getListofMonths($unit_reference){
  $get_all_months_name = DateHelper::monthNamesUntranslated();
  $query = \Drupal::database()->select('audit_cycle__field_unit_reference', 'h');
  $query->fields('h',['entity_id']);
  $query->condition('h.field_unit_reference_target_id', $unit_reference);
  $query->range(0, 1);
  $nids = $query->execute()->fetchAll();
  $node_storage = \Drupal::entityManager()->getStorage('audit_cycle');
  $entity_audit_cycle = $node_storage->load($nids[0]->entity_id);
  if(count($entity_audit_cycle)){
    $cycle_type = $entity_audit_cycle->get('field_cycle_type')->value;
    $frequency = $entity_audit_cycle->get('field_audit_frequency')->value;
    if($cycle_type == 0){
      $audit_cycle_start_date = $entity_audit_cycle->get('field_financial_dates')->value;
      $audit_cycle_end_date = $entity_audit_cycle->get('field_financial_dates')->end_value;
    }
    elseif ($cycle_type == 1) {
      $audit_cycle_start_date = $entity_audit_cycle->get('field_calendar_date')->value;
      $audit_cycle_end_date = $entity_audit_cycle->get('field_calendar_date')->end_value;
    }
  }
 
  $curr = date('m');
  $month_array = [
    1=>[12],
    2=>[6,6],
    3=>[4,4,4],
    4=>[3,3,3,3],
    5=>[5,5,2],
    6=>[6,6],
    7=>[7,5],
    8=>[8,4],
    9=>[9,3],
    10=>[10,2],
    11=>[11,1],
    12=>[12],
  ];
  foreach ($month_array[$frequency] as $key => $value) {
    $total += $value;
    if ($curr <= $total) {
      $month_of_audit_frequency = $key+1;
      break;
    }
  }
  return $month_of_audit_frequency;
}

/**
 * Method to get count of Planned events.
 */
function getPlannedEventCount($unit_reference){
  $query = \Drupal::database()->select('node_field_data', 'n');
  $query->join('node__field_refere', 'rf', 'n.nid = rf.field_refere_target_id');
  $query->fields('rf',['entity_id']);
  $query->condition('rf.bundle', 'planned_events');
  $query->condition('rf.field_refere_target_id', $unit_reference);
  $nids = $query->execute()->fetchAll();
  foreach ($nids as $key => $value) {
    $data[$value->entity_id] = $value->entity_id;
  }
  return $data;
}

/**
 * Implements  hook_entity_presave().
 */
function aps_general_node_presave(Node $node) {
 // if($node->bundle() == 'planned_events'){
 //    if($suggested_date = $node->get('field_suggested_date')->value){
 //      $current_user = \Drupal::currentUser();
 //      $roles = $current_user->getRoles();
 //      foreach ($roles as $key => $value) {
 //        $user_role = $value;
 //      }
 //      $user_timezone =  drupal_get_user_timezone();
 //      $get_current_timestamp = getCurrentTimestamp($user_timezone);
 //      if($user_role == 'auditor' || $user_role == 'auditee'){
 //        $notifictaion_insert = \Drupal::database()->insert('notifications');
 //        $message = 'Reschedule the audit to '.$suggested_date;
 //        $notifictaion_insert->fields([
 //          'nid' => $node->id(),
 //          'uid' => $current_user->id(),
 //          'message' => $message,
 //          'timestamp' => $get_current_timestamp,
 //          'status' => 0,
 //        ]);
 //        $notifictaion_insert->execute();
 //      }
 //    }
 //  }
}

/**
 * Implements  hook_entity_create().
 */
function aps_general_node_create(Node $entity) {
  if ($entity->bundle() == 'procedures') {
    $config = \Drupal::service('config.factory')->getEditable('aps_general.adduserroles');
    $current_count = $config->get('current_count');
    if($current_count == 0){
      $count = $config->get('default_count');
    }
    elseif ($current_count > 0) {
      $count = $config->get('current_count');
    }
    if($entity->isNew()){
      $paragraph = Paragraph::create([
        'field_s_no' => $count,
        'type' => 'procedures',
      ]);
      $paragraph->save();
      $paragraphp_version = [
        [
          'target_id' => $paragraph->id(),
          'target_revision_id' => $paragraph->getRevisionId(),
        ],
      ];
      $entity->set('field_create_procedure', $paragraphp_version);
      $config->set('previous_count', $count);
      $config->set('current_count', $count + 1);
      $config->save();
    }
  }
}

/**
 * Implements  hook_preprocess_page().
 */
function aps_general_preprocess_page(&$variables) {
  global $base_url;
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  foreach ($roles as $key => $value) {
    $user_role = $value;
  }
  $route_name = \Drupal::routeMatch()->getRouteName();
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof  \Drupal\node\NodeInterface) {
    $nid_type = $node->bundle();
  }
  if($route_name == 'view.customer_manual_parts.product_listing'){
    //*** Rendering parts block ***//
    $view = \Drupal\views\Views::getView('customer_manual_parts');
    $view->setDisplay('parts');
    $title = $view->getTitle();
    $render = $view->render();
    $the_title_render_array = [
      '#markup' => '<h1>'.$title.'</h1>',
      '#allowed_tags' => ['h1'],
    ];

    //*** Rendering CSv Block ***//
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [];
    $plugin_block = $block_manager->createInstance('csv_import_block', $config);
    $render_csv = $plugin_block->build();
    $variables['page']['content']['csv'] = $render_csv;
  }
  if($uri[0] == 'documentrecords'){
    $variables['#attached']['drupalSettings']['page'] = $uri[0];
    $variables['#attached']['library'][] = 'aps_audit_planning/aps_audit_general_js';
  }
  
  if($uri[0] == 'planned-audit-listing'){
    $variables['#attached']['drupalSettings']['page'] = $uri[0];
    $variables['#attached']['library'][] = 'aps_audit_planning/aps_audit_general_js';
  }

  if($route_name == 'eck.entity.add' && $uri[2] == 'audit_criteria_score'){
    $variables['#attached']['library'][] = 'aps_audit_criteria/audit_criteria_system_js';
  }

  if($route_name == 'entity.audit_criteria_score.edit_form'){
    $variables['#attached']['library'][] = 'aps_audit_criteria/audit_criteria_system_js';
  }
  $variables['#attached']['drupalSettings']['siteBaseUrl'] = $base_url;

  //Cahnege Block ids for Notification system.
  if($user_role == 'auditor' || $user_role == 'auditee' ){
    $block__notification_id = '#block-audit-tool-adminmainmenuforauditor';
    $menu__notification_id = '#superfish-admin-main-menu-for-auditor';
  }
  else{
    $block__notification_id = '#block-adminmainmenu-4';
    $menu__notification_id = '#superfish-admin-main-menu';
  }
  $variables['#attached']['drupalSettings']['block_id'] = $block__notification_id;
  $variables['#attached']['drupalSettings']['notify_id'] = $menu__notification_id;
  $variables['#attached']['library'][] = 'aps_general/aps_general_notification_js';

  if($route_name == 'view.user_registration_view.registration' && $uri[0] == 'unit-registration-view'){
    $variables['#attached']['library'][] = 'aps_audit_report_analysis/aps_dashboard_risk_management_js';
  }

  Drupal\Core\Cache\Cache::invalidateTags(['local_task']);
  Drupal\Core\Cache\Cache::invalidateTags(['block_list']);
  Drupal\Core\Cache\Cache::invalidateTags(['block_view']);
}

/**
 * Implements  hook_menu_local_tasks_alter().
 */
function aps_general_menu_local_tasks_alter(&$data, $route_name, $root_path) {
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  foreach ($roles as $key => $value) {
    $user_role = $value;
  }

  if($route_name == 'eck.entity.add'){  
    if($uri[2] == 'audit_criteria'){
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_internal']['#active'] = TRUE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_external']['#active'] = FALSE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_customer']['#active'] = FALSE;
    }
    elseif ($uri[2] == 'audit_criteria_process') {
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_external']['#active'] = TRUE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_internal']['#active'] = FALSE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_customer']['#active'] = FALSE;
    }
    elseif ($uri[2] == 'audit_criteria_product') {
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_customer']['#active'] = TRUE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_external']['#active'] = FALSE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_internal']['#active'] = FALSE;
    }
    unset($data['tabs'][0]['devel.entities:audit_criteria.devel_tab']);
    unset($data['tabs'][0]['eck.entity_content:audit_criteria.eck_canonical_tab']);
    unset($data['tabs'][0]['eck.entity_content:audit_criteria.eck_edit_tab']);
    unset($data['tabs'][0]['eck.entity_content:audit_criteria.eck_delete_tab']); 
  }
  elseif($route_name == 'entity.audit_criteria.edit_form' || $route_name == 'entity.audit_criteria_process.edit_form' || $route_name == 'entity.audit_criteria_product.edit_form'){
    if($uri[0] == 'audit_criteria'){
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_internal']['#active'] = TRUE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_external']['#active'] = FALSE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_customer']['#active'] = FALSE;
    }
    elseif ($uri[0] == 'audit_criteria_process') {
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_external']['#active'] = TRUE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_internal']['#active'] = FALSE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_customer']['#active'] = FALSE;
    }
    elseif ($uri[0] == 'audit_criteria_product') {
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_customer']['#active'] = TRUE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_external']['#active'] = FALSE;
      $data['tabs'][0]['aps_pre_audit.manuals:audit_criteria_internal']['#active'] = FALSE;
    }
    unset($data['tabs'][0]['devel.entities:audit_criteria.devel_tab']);
    unset($data['tabs'][0]['eck.entity_content:audit_criteria.eck_canonical_tab']);
    unset($data['tabs'][0]['eck.entity_content:audit_criteria.eck_edit_tab']);
    unset($data['tabs'][0]['eck.entity_content:audit_criteria.eck_delete_tab']);
  }
  
  if(isset($uri[2])){
    if (stripos(strtolower($uri[2]), 'external_audit_?') !== false) {
      unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
      unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
      unset($data['tabs'][0]['aps_general.manual']);
      unset($data['tabs'][0]['aps_general.manual_product']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:procedure_listing']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:audit_list']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:systems']);
      $data['tabs'][0]['aps_pre_audit.manuals:external_audit_systems']['#active'] = TRUE;
    }
    if (stripos(strtolower($uri[2]), 'clauses?') !== false) {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
        unset($data['tabs'][0]['aps_general.manual']);
        unset($data['tabs'][0]['aps_general.manual_product']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:procedure_listing']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:audit_list']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:systems']);
        $data['tabs'][0]['aps_pre_audit.manuals:external_audit_clauses']['#active'] = TRUE;
      }
    }
    elseif ($uri[2] == 'unit') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs']);
      }
    }
    elseif ($uri[2] == 'department') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs']);
      }
    }
     elseif (stripos(strtolower($uri[2]), 'department?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'business_process?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'supplier?') !== false) {
        unset($data['tabs']);
    }
    elseif ($uri[2] == 'internal_audit') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) { 
        unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
        unset($data['tabs'][0]['aps_general.manual']);
        unset($data['tabs'][0]['aps_general.manual_product']);
      }
    }
    elseif (stripos(strtolower($uri[2]), 'internal_audit?') !== false) {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
        unset($data['tabs'][0]['aps_general.manual']);
        unset($data['tabs'][0]['aps_general.manual_product']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:procedure_listing']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:external_audit_systems']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:external_audit_clauses']);
        $data['tabs'][0]['aps_pre_audit.manuals:systems']['#active'] = TRUE;
      }
    }
    elseif (stripos(strtolower($uri[2]), 'planned_events?') !== false) {
        unset($data['tabs']);
    }
    elseif ($uri[2] == 'customers_manual?destination=node') {
      unset($data['tabs']);
    }
    elseif ($uri[2] == 'customers_manual') {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'section?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'answers?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'assembly?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'internal_documents?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'manufacturing_process?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'pre_audit_records?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'pre_audit_manuals?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'procedures?') !== false) {
      unset($data['tabs'][0]['aps_general.manual']);
      unset($data['tabs'][0]['aps_general.manual_product']);  
      unset($data['tabs'][0]['aps_general.clauses']); 
      unset($data['tabs'][0]['aps_pre_audit.manuals:audit_list']); 
      unset($data['tabs'][0]['aps_pre_audit.manuals:systems']); 
      unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
      unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
      unset($data['tabs'][0]['aps_audit_criteria.audit_list']);
      unset($data['tabs'][0]['aps_audit_criteria.systems_setting']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:external_audit_systems']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:external_audit_clauses']);
      $data['tabs'][0]['aps_pre_audit.manuals:add_procedures']['#active'] = TRUE;
    }
  }
  if (stripos(strtolower($current_uri), 'audit_criteria/1/edit?') !== false) {
    // $data['tabs'][0]['eck.entity_content:audit_criteria.eck_edit_tab']['#link']['title'] = 'Systems';
    // unset($data['tabs'][0]['aps_general.systems_setting']);
  }
  if(stripos(strtolower($current_uri), 'internal-audit-list?') !== false){
    unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
    unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
    $data['tabs'][0]['aps_pre_audit.manuals:audit_list']['#active'] = TRUE;
  }
  if($current_uri == 'internal-audit-list'){
    unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
    unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
  }
  if($route_name == 'view.planned_audit_listing.document_list_ia'){
    if($user_role == 'auditor'){
      $config = \Drupal::service('config.factory')->getEditable('aps_general.adduserroles');
      if($config->get('nid')){
        $id = $config->get('nid');
      }
      if($id){
        $data['tabs'][0]['aps_pre_audit.manuals:internal_documents']['#link']['url']->setRouteParameters(['arg_0' => $id]);
      }
    }
  }
  if(stripos(strtolower($current_uri), 'procedure-listing?') !== false){
    unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
    unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
    unset($data['tabs'][0]['aps_pre_audit.manuals:external_audit_systems']);
    unset($data['tabs'][0]['aps_pre_audit.manuals:external_audit_clauses']);
    $data['tabs'][0]['aps_pre_audit.manuals:procedure_listing']['#active'] = TRUE;
  }
  if($uri[0] = 'import'){
    unset($data['tabs'][0]['aps_pre_audit.manuals:external_audit_systems']);
    unset($data['tabs'][0]['aps_pre_audit.manuals:external_audit_clauses']);
    $data['tabs'][0]['aps_pre_audit.manuals:csv_operations']['#active'] = TRUE;
  }
   
  //Audit Criteria Settings.
  if($route_name == 'entity.audit_criteria_score.edit_form'){
    unset($data['tabs'][0]['eck.entity_content:audit_criteria_score.eck_edit_tab']);
  }
  elseif ($route_name == 'entity.audit_cycle.edit_form') {
    unset($data['tabs'][0]['eck.entity_content:audit_cycle.eck_edit_tab']);
  }
  elseif ($route_name == 'entity.audit_criteria_external.edit_form') {
    unset($data['tabs'][0]['eck.entity_content:audit_criteria_external.eck_edit_tab']);
  }
  elseif ($route_name == 'entity.audit_criteria_customer.edit_form') {
    unset($data['tabs'][0]['eck.entity_content:audit_criteria_customer.eck_edit_tab']);
  }
  elseif ($route_name == 'entity.audit_criteria_supplier.edit_form') {
    unset($data['tabs'][0]['eck.entity_content:audit_criteria_supplier.eck_edit_tab']);
  }
}

/**
 * Implements  hook_entity_insert().
 */
function aps_general_user_insert(User $user) {
  if(\Drupal::request()->query->get('type') == 'auditor'){
    $user->addRole('auditor');
    $user->save();
  }

}

/**
 * Implements hook_views_query_alter().
 */
function aps_general_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if($view->id() === 'ncr_status_update'){
    if($view->getDisplay()->display['id'] == 'car_auditor' || $view->getDisplay()->display['id'] == 'car_auditee' || $view->getDisplay()->display['id'] == 'car_mr'){
      $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
      $uri = explode('/', $current_uri);
      $definition1 = [
        'table' => 'node__field_refere',
        'field' => 'entity_id',
        'left_table' => 'paragraphs_item_field_data',
        'left_field' => 'parent_id',
      ];

      $definition2 = [
        'table' => 'node__field_report_reference',
        'field' => 'entity_id',
        'left_table' => 'paragraphs_item_field_data',
        'left_field' => 'parent_id',
      ];

      $join1 = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition1);
      $join2 = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition2);
      $query->addRelationship('node__field_refere', $join1, 'node');
      $query->addRelationship('node__field_report_reference', $join2, 'node');
      $query->addWhere('AND', 'node__field_refere.field_refere_target_id', $uri[1]);
    }
  }
}

function aps_general_views_pre_render(ViewExecutable $view) {
}

/**
 * Implements hook_link_alter().
 */
function aps_general_link_alter(&$variables) {
  $current_user = \Drupal::currentUser();
  $current_user_id = $current_user->id();
  $roles = $current_user->getRoles();
  foreach ($roles as $key => $value) {
    $user_role = $value;
  }
  $route_name = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if ($node instanceof \Drupal\node\NodeInterface) {
    $nid_type = $node->bundle();
  }
  if($route_name == 'entity.node.edit_form' && $nid_type == 'customers_manual'){
    $linkText = $variables['text'];
    $cleanLinkText = rtrim(strip_tags($linkText));
    if ($cleanLinkText == 'Add Manual Parts') {
      $variables['options']['query'] = ['id' => $node->id()];
    }
  }

  if ($route_name == 'view.planned_audit_listing.page_1') {
    $config = \Drupal::service('config.factory')->getEditable('aps_pre_audit.getmoreinfo');
    $linkText = $variables['text'];
    $cleanLinkText = rtrim(strip_tags($linkText));
    if ($cleanLinkText == 'Documents') {
      $get_nid = explode('?', $uri[1]);
      $url = Url::fromRoute('view.planned_audit_listing.document_list_ia',['arg_0' => $get_nid[0]]);
      $get_unit_from_event = Node::load($get_nid[0]);
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $get_unit_from_event->field_refere->target_id);
      $config->set('nid', $get_nid[0])->save();
    }
  }
  $linkText = $variables['text'];
  $cleanLinkText = rtrim(strip_tags($linkText));
  if ($cleanLinkText == 'Notification') {
    $database = \Drupal::service('database');
    if($database->schema()->tableExists('notifications')){
      $query = \Drupal::database()->select('notifications', 'n');
      $query->fields('n');
      // if($user_role == 'auditor' || $user_role == 'auditee'){
        $query->condition('uid', $current_user_id);
      // }
      $query->condition('status', 0);
      $nids = $query->execute()->fetchAll();
    }
    else{
      $nids = [];
    }
    $count = count($nids);
    if($count == 0){
      $class = 'not-new';
      $notify_icon = 'notifications_none';
      $title = new TranslatableMarkup("@text", array(
       '@text' => '',
      ));
    }
    else{
      $class = 'new';
      $notify_icon = 'notifications_active';
      $title = new TranslatableMarkup("@text", array(
       '@text' => $count,
      ));
    }
    $title_with_class = '<span class='.$class.'>'.$title.'</span><i class="material-icons">'.$notify_icon.'</i>';
    $variables['text'] = Markup::create($title_with_class);
  }

  if ($cleanLinkText == 'Go To Unit Page') {
    $id = \Drupal::request()->query->get('id');
    if($id){
      $url = Url::fromRoute('view.user_registration_view.registration',['arg_0' => $id]);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }
  
  if ($cleanLinkText == 'ORGANISATION') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Auditors') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'External Audit Details') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Audit Criteria Settings') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('audit_criteria__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->condition('h.bundle', 'systems');
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();
      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/audit_criteria/'.$nids[0]->entity_id.'/edit');
        $url->setRouteParameter('type', 'edit');
        $url->setRouteParameter('destination', $current_uri);
      }
      else{
        $url =Url::fromUserInput('/admin/content/audit_criteria/add/systems');
        $url->setRouteParameter('type', 'add');
        $url->setRouteParameter('destination', $current_uri);
      }
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Audit Criteria') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('audit_criteria__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->condition('h.bundle', 'systems');
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();

      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/audit_criteria/'.$nids[0]->entity_id.'/edit');
        $url->setRouteParameter('type', 'edit');
        $url->setRouteParameter('destination', $current_uri);
      }
      else{
        $url =Url::fromUserInput('/admin/content/audit_criteria/add/systems');
        $url->setRouteParameter('type', 'add');
        $url->setRouteParameter('destination', $current_uri);
      }
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }
  

  if ($cleanLinkText == 'Internal(active tab)') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('audit_criteria__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->condition('h.bundle', 'systems');
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();
      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/audit_criteria/'.$nids[0]->entity_id.'/edit');
        $url->setRouteParameter('type', 'edit');
        $url->setRouteParameter('destination', $current_uri);
      }
      else{
        $url =Url::fromUserInput('/admin/content/audit_criteria/add/systems');
        $url->setRouteParameter('type', 'add');
        $url->setRouteParameter('destination', $current_uri);
      }
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'External(active tab)') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('audit_criteria_external__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->condition('h.bundle', 'external');
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();
      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/audit_criteria_external/'.$nids[0]->entity_id.'/edit');
        $url->setRouteParameter('type', 'edit');
        $url->setRouteParameter('destination', $current_uri);
      }
      else{
        $url =Url::fromUserInput('/admin/content/audit_criteria_external/add/external');
        $url->setRouteParameter('type', 'add');
        $url->setRouteParameter('destination', $current_uri);
      }
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Customer(active tab)') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('audit_criteria_customer__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->condition('h.bundle', 'customer');
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();
      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/audit_criteria_customer/'.$nids[0]->entity_id.'/edit');
        $url->setRouteParameter('type', 'edit');
        $url->setRouteParameter('destination', $current_uri);
      }
      else{
        $url =Url::fromUserInput('/admin/content/audit_criteria_customer/add/customer');
        $url->setRouteParameter('type', 'add');
        $url->setRouteParameter('destination', $current_uri);
      }
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Supplier(active tab)') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('audit_criteria_supplier__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->condition('h.bundle', 'supplier');
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();
      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/audit_criteria_supplier/'.$nids[0]->entity_id.'/edit');
        $url->setRouteParameter('type', 'edit');
        $url->setRouteParameter('destination', $current_uri);
      }
      else{
        $url =Url::fromUserInput('/admin/content/audit_criteria_supplier/add/supplier');
        $url->setRouteParameter('type', 'add');
        $url->setRouteParameter('destination', $current_uri);
      }
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Score Settings(active tab)') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('audit_criteria_score__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->condition('h.bundle', 'score');
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();
      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/audit_criteria_score/'.$nids[0]->entity_id.'/edit');
        $url->setRouteParameter('type', 'edit');
        $url->setRouteParameter('destination', $current_uri);
      }
      else{
        $url =Url::fromUserInput('/admin/content/audit_criteria_score/add/score');
        $url->setRouteParameter('type', 'add');
        $url->setRouteParameter('destination', $current_uri);
      }
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Time Cycle Settings(active tab)') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('audit_cycle__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->condition('h.bundle', 'settings');
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();
      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/audit_cycle/'.$nids[0]->entity_id.'/edit',['query' => ['destination' => $current_uri],'absolute' => TRUE]);
      }
      else{
        $url =Url::fromUserInput('/admin/content/audit_cycle/add/settings',['query' => ['destination' => $current_uri],'absolute' => TRUE]);
      }
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Audit Checklist') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Internal Audit') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Add Cert. Standard') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('destination', $current_uri);
    }
  }

  if ($cleanLinkText == 'Add Decision') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('destination', $current_uri);
    }
  }

  if ($cleanLinkText == 'Add Scope') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('destination', $current_uri);
    }
  }

  if ($cleanLinkText == 'Internal Audit Process') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'CUSTOMERS') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Role Registration') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'RESCHEDULE') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('schedule_type', 'reschedule');
    }
  }

  if ($cleanLinkText == 'NCR' && $user_role == 'auditee') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('destination', $current_uri);
    }
  }

  if ($cleanLinkText == 'SCHEDULING') {
    $id = $uri[1];
    if($id){
      $url =Url::fromUserInput('/audit-planning/'.$id);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }

  if ($cleanLinkText == 'Calendar') {
    $id = $uri[1];
    if($id){
      $url =Url::fromUserInput('/audit-planning/'.$id);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }

  if ($cleanLinkText == 'Audit') {
    $id = $uri[1];
    if($id){
      $url =Url::fromUserInput('/planned-audit-listing/'.$id);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }

  if ($cleanLinkText == 'HOLIDAY LIST') {

    $id = $uri[1];
    if($id){
      $url =Url::fromUserInput('/holidays-listing/'.$id);
      unset($variables['url']);
      $variables['url'] = $url;
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Add Holidays') {
    $id = $uri[1];
    if($id){
      $query = \Drupal::database()->select('holidays__field_unit_reference', 'h');
      $query->fields('h',['entity_id']);
      $query->condition('h.field_unit_reference_target_id', $id);
      $query->range(0, 1);
      $nids = $query->execute()->fetchAll();
      if(isset($nids[0]->entity_id)){
        $url =Url::fromUserInput('/holidays/'.$nids[0]->entity_id.'/edit');
      }
      else{
        $url =Url::fromUserInput('/admin/content/holidays/add/holidays');
      }
      unset($variables['url']);
      $url->setRouteParameter('unit_reference', $id);
      $variables['url'] = $url;
    }
  }

   if ($cleanLinkText == 'SUPPLIERS') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }
}

function get_user_roles(){
  $roles = user_role_names(TRUE);
  return $roles;
}

function test(){
 $form['field_business_process_efficienc']['widget'][0]['subform']['field_other']['widget']['#access'] = TRUE;
 return $form['field_business_process_efficienc'];
}
/**
 * Callback method after unit form submits.
 */
function aps_general_unit_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $form_values = $form_state->getValues();
  $field_sales_turnover = $form_values['field_sales_turnover'][0]['value'];
  $field_total_members = $form_values['field_total_members'][0]['value'];
  $field_contributed_sales = $form_values['field_contributed_sales'][0]['value'];
  $total_system_mandays = getMandaysFromAuditType('systems', $field_sales_turnover, $field_total_members, $field_contributed_sales);
  $nid = $form_values['nid'];
  $node_object = Node::load($nid);
  $node_object->set('field_total_mandays', $total_system_mandays);
  $node_object->save();
  $response = Url::fromUserInput('/unit-registration-view/'.$nid);

  //Saving mandays in aps_audit_planning.mandaysettings.yml
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aps_audit_planning.mandaysettings.yml');
  $config->set('system_mandays_standard', $total_system_mandays);
  $config->set('system_mandays_updated', $total_system_mandays);

  // $unit_data = [
  //   $node->id() => ['system_mandays_standard' => 0, 'process_mandays_standard' => 0, 'product_mandays_standard' => 0, 'system_mandays_updated' => 0, 'process_mandays_updated' => 0, 'product_mandays_updated' => 0],
  // ];

  // $yaml = Yaml::dump($unit_data);

  // file_put_contents('/path/to/file.yaml', $yaml);
  $config->save(TRUE);

  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after business process form submits.
 */
function aps_business_process_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $id = \Drupal::request()->query->get('id');
  $node_object = Node::load($id);
  $title = $node_object->get('title')->value;
  $vid_to_check = strtolower(preg_replace('/\s+/', '_', $title));
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $response = Url::fromUserInput('/node/add/department?id='.$id);
  $form_state->setRedirectUrl($response);
}

function add_department(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $id = \Drupal::request()->query->get('id');
  $response = Url::fromRoute('node.add',['node_type' => 'business_process', 'id' => $id]);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after department form submits.
 */
function aps_department_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_ref = \Drupal::request()->query->get('id');
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $response = Url::fromUserInput('/node/add/section?id='.$unit_ref);
  $form_state->setRedirectUrl($response);
}

function add_section(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $id = \Drupal::request()->query->get('id');
  $response = Url::fromRoute('node.add',['node_type' => 'department', 'id' => $id]);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after department form submits.
 */
function aps_section_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_ref = \Drupal::request()->query->get('id');
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  if($form_values['field_assembly'][0]['value'] == 'assembly'){
    $response = Url::fromRoute('node.add',['node_type' => 'assembly', 'id' => $unit_ref, 'section_reference' => $nid]);
  }
  elseif ($form_values['field_assembly'][0]['value'] == 'manufacturing') {
    $response = Url::fromRoute('node.add',['node_type' => 'manufacturing_process', 'id' => $unit_ref, 'section_reference' => $nid]);
  }
  else{
    $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
    $id = \Drupal::request()->query->get('id');
    $response = Url::fromRoute('node.add',['node_type' => 'section', 'id' => $unit_ref]);
  }
  $form_state->setRedirectUrl($response);
}

function create_assembly(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $id = \Drupal::request()->query->get('id');
  $response = Url::fromRoute('node.add',['node_type' => 'section', 'id' => $id]);
  $form_state->setRedirectUrl($response);
}


/**
 * Callback method after assembly form submits.
 */
function aps_assembly_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $id = \Drupal::request()->query->get('id');
  $response = Url::fromUserInput('/unit-registration-view/'.$id);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after user form submits.
 */
function aps_assembly_user_redirect_default(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/user-listing-all');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after user form submits.
 */
function aps_assembly_user_redirect_auditor(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/user-listing-auditor');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after procedure form submits.
 */
function aps_general_procedures_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $id = \Drupal::request()->query->get('unit_reference');
  $response = Url::fromUserInput('/unit-registration-view/'.$id);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after Ext. Audit form submits.
 */
function aps_ext_audit_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $id = \Drupal::request()->query->get('unit_reference');
  $response = Url::fromRoute('node.add',['node_type' => 'external_audit_', 'id' => $id]);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after Clauses form submits.
 */
function aps_clauses_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $id = \Drupal::request()->query->get('unit_reference');
  $response = Url::fromUserInput('/node/add/clauses',['query' => ['unit_reference' => $id]]);
  $form_state->setRedirectUrl($response);
}

function parts_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $id = \Drupal::request()->query->get('unit_reference');
  $response = Url::fromUserInput('/node/add/customers_manual',['query' => ['unit_reference' => $id]]);
  $form_state->setRedirectUrl($response);
}

function customer_add(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $destination = \Drupal::request()->query->get('destination');
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $response = Url::fromUserInput('/node/add/customers_manual?unit_reference='.$unit_reference);
  $form_state->setRedirectUrl($response);
}

function supplier_add(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $destination = \Drupal::request()->query->get('destination');
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $response = Url::fromUserInput('/node/add/supplier?unit_reference='.$unit_reference);
  $form_state->setRedirectUrl($response);
}

function checklist_submission(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $audit_reference = \Drupal::request()->query->get('audit_reference');
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $node_object = Node::load($audit_reference);
  $node_object->set('field_checklist', $nid);
  $node_object->save();
  $response = Url::fromUserInput('/planned-mr-audit-listing');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback to get Current timestamp.
 */
function getCurrentTimestamp($user_timezone){
  $db_timezone = 'UTC';
  $get_current_timestamp =  \Drupal::time()->getCurrentTime();
  $current_date_object = DateTimePlus::createFromTimestamp($get_current_timestamp, $db_timezone);
  $current_date_object->setTimezone(new \DateTimeZone($user_timezone));
  return $current_date_object->getTimestamp();
}

function getTidByName($name = NULL, $vid = NULL) {
  $properties = [];
  if (!empty($name)) {
    $properties['name'] = $name;
  }
  if (!empty($vid)) {
    $properties['vid'] = $vid;
  }
  $terms = \Drupal::entityManager()->getStorage('taxonomy_term')->loadByProperties($properties);
  $term = reset($terms);

  return !empty($term) ? $term->id() : 0;
}

function get_location_from_unit(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable){
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if(\Drupal::request()->query->get('id') && stripos(strtolower($uri[2]), 'department?') !== false || stripos(strtolower($uri[2]), 'section?') !== false){
    $address_option = [];
    $id = \Drupal::request()->query->get('id');
    $node_object = Node::load($id);
    foreach ($node_object->field_remote_address->getValue() as $key => $value) {
      $support_locations[] = $value['locality'];
    }
    $field_address[] = $node_object->field_address->locality;
    $options = array_merge($field_address , $support_locations);
  }
  else{
    $options = [];
  }
  return $options;
}

function getDepartmenttypeUnderunit($bundle, $unit_reference){
  $query = \Drupal::database()->select('node__field_refere', 'n');
  $query->fields('n',['entity_id']);
  $query->condition('n.bundle', $bundle);
  $query->condition('n.field_refere_target_id', $unit_reference);
  $nids = $query->execute()->fetchAll();
  $selected_department = [];
  $selected_department['_none'] = t('- None -');
  foreach ($nids as $i => $j) {
    $title = Node::load($j->entity_id);
    $selected_department[$j->entity_id] = $title->title->value;
  }
   return $selected_department;
}

function getDeptfromBP(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_business_process'))){
    $department_array = $form_state->getValue('field_business_process')[0];
    $key = $department_array['target_id'];
    $form['field_department']['widget']['#options'] = getdepartmentDropdownOptionsfromBP($key);
   }
   return $form['field_department'];
}

function getSectionfromdept(array $form, FormStateInterface $form_state) {
  if(count($form_state->getValue('field_department'))){
    $department_array = $form_state->getValue('field_department')[0];
    $key = $department_array['target_id'];
    $form['field_section_type']['widget']['#options'] = getsectionDropdownOptionsfromDept($key);
   }
   return $form['field_section_type'];
}

function getdepartmentDropdownOptionsfromBP($key) {
  if($key){
    $query = \Drupal::database()->select('node_field_data', 'n');
    $query->join('node__field_select_business_process', 'rf', 'n.nid = rf.entity_id');
    $query->fields('rf',['entity_id', 'bundle']);
    $query->condition('rf.bundle', 'department');
    $query->condition('rf.field_select_business_process_target_id', $key);
    $nids = $query->execute()->fetchAll();
  }
    $entity_title['_none'] = "- None -";
    foreach ($nids as $entity) {
      $node_object = Node::load($entity->entity_id);
      $entity_title[$node_object->get('nid')->value] = $node_object->get('title')->value;
    }
    return $entity_title;
  }

function getsectionDropdownOptionsfromDept($key) {
  if($key){
    $query = \Drupal::database()->select('node_field_data', 'n');
    $query->join('node__field_select_department_type', 'rf', 'n.nid = rf.entity_id');
    $query->fields('rf',['entity_id', 'bundle']);
    $query->condition('rf.bundle', 'section');
    $query->condition('rf.field_select_department_type_target_id', $key);
    $nids = $query->execute()->fetchAll();
  }
    $entity_title['_none'] = "- None -";
    foreach ($nids as $entity) {
      $node_object = Node::load($entity->entity_id);
      $entity_title[$node_object->get('nid')->value] = $node_object->get('title')->value;
    }
    return $entity_title;
  }

/**
 * Implements hook_cron().
 */
function aps_general_cron() {
  //Get All units.
  global $base_url;
  $query = \Drupal::database()->select('node_field_data', 'n');
  $query->fields('n',['nid', 'type']);
  $query->condition('n.type', 'unit');
  $units = $query->execute()->fetchAll();
  $get_user_timezone =  drupal_get_user_timezone();
  foreach ($units as $unit_key => $unit_value) {
      $dates = auditReleaseDates($unit_value->nid);
      foreach ($dates as $i => $j) {
        if($j['moderation_state'] == 'release_audit'){
          if($j['changed'] < getCurrentTimestampfromdate($get_user_timezone,$j['release_start_date'], NULL)){
             $node_object = Node::load($j['nid']);
             $node_object->set('field_release_status', 'intime');
             $node_object->save();
          }
          else{
            $node_object = Node::load($j['nid']);
            $node_object->set('field_release_status', 'notintime');
            $node_object->save();
          }
        }
        if($dates[$i]['release_start_date']){
          $current_date = date('Y-m-d',\Drupal::time()->getCurrentTime());
          if($current_date == $dates[$i]['release_start_date']){
            $url = $base_url.'/node/'.$j['nid'].'/edit';
            $uid = \Drupal::currentUser()->id();
            $get_current_timestamp = getCurrentTimestampfromdate($get_user_timezone,$j['release_start_date'], NULL);
            $notifictaion_insert = \Drupal::database()->insert('notifications');
            $message = 'Last date for Audit Release is  '.$dates[$i]['release_start_date'].'Please Check the Url:'.'<a href='.$url.'>Link</a>';
            $node_detail = Node::load($j['nid']);
            $notifictaion_insert->fields([
              'nid' => $node_detail->id(),
              'uid' => $node_detail->getOwner()->id(),
              'message' => $message,
              'timestamp' => strtotime($get_current_timestamp),
              'status' => 0,
            ]);
            $notifictaion_insert->execute();
          }
        }
    }
  }
}

/*
 * Get Audit Release dates.
 */
function auditReleaseDates($unit_reference){
    $event_nids = [];
    $query = \Drupal::database()->select('content_moderation_state_field_data', 'cm');
    $query->join('node_field_revision', 'rf', 'cm.content_entity_revision_id = rf.vid');
    $query->join('node__field_refere', 'ref', 'cm.content_entity_id = ref.entity_id');
    $query->join('node__field_start_date', 'sd', 'cm.content_entity_id = sd.entity_id');
    $query->join('node__field_end_date', 'ed', 'cm.content_entity_id = ed.entity_id');
    $query->fields('rf',['nid', 'vid', 'changed']);
    $query->fields('cm',['revision_id', 'moderation_state']);
    $query->fields('ref');
    $query->fields('sd', ['field_start_date_value']);
    $query->fields('ed', ['field_end_date_value']);
    $query->condition('ref.bundle', 'planned_events');
    // $query->condition('cm.moderation_state', 'release_audit');
    $query->condition('ref.field_refere_target_id', $unit_reference);
    $nids = $query->execute()->fetchAll();
    $get_user_timezone =  drupal_get_user_timezone();

    //Load Audit Cycle Configurations.
    $query = \Drupal::database()->select('audit_cycle__field_unit_reference', 'h');
    $query->fields('h',['entity_id']);
    $query->condition('h.field_unit_reference_target_id', $unit_reference);
    $query->range(0, 1);
    $nids_cycle = $query->execute()->fetchAll();
    $node_storage = \Drupal::entityManager()->getStorage('audit_cycle');
    $entity_audit_cycle = $node_storage->load($nids_cycle[0]->entity_id);
    if(count($entity_audit_cycle)){
      $scheduled_date = $entity_audit_cycle->get('field_schedule_release')->target_id;
      if($scheduled_date){
        $node_storage = \Drupal\paragraphs\Entity\Paragraph::load($scheduled_date);
        $days_before_event = $node_storage->get('field_department')->value;
      }
    }

    foreach ($nids as $key => $value) {
      $start_date_ = date('Y-m-d', $value->field_start_date_value);
      $end_date_ = date('Y-m-d', $value->field_end_date_value);
      $start_date_array = explode('-', $start_date_);
      $format_for_first_day = 'Y-'. $start_date_array[1] . '-01';
      $format_for_last_day = 'Y-m-t';
      $start_date = date($format_for_first_day);
      $end_date= date($format_for_last_day);
      $current_month = date('m');
      if($current_month == $start_date_array[1]){
        $planned_nids_start_date = getCurrentTimestampfromdate($get_user_timezone, $start_date_, NULL);
        $planned_nids_end_date = getCurrentTimestampfromdate($get_user_timezone, $end_date_ , NULL);
      }
      else{
      $planned_nids_start_date = getCurrentTimestampfromdate($get_user_timezone, $start_date, $days_before_event);
      $planned_nids_end_date = $end_date_;
      }

      if($current_month <= $start_date_array[1]){
        $event_nids[$value->nid]['nid'] = $value->nid;
        $event_nids[$value->nid]['release_start_date'] = $planned_nids_start_date;
        $event_nids[$value->nid]['release_end_date'] = $end_date_;
        $event_nids[$value->nid]['planned_start_date'] =$value->field_start_date_value;
        $event_nids[$value->nid]['planned_end_date'] =$value->field_end_date_value;
        $event_nids[$value->nid]['moderation_state'] =$value->moderation_state;
        $event_nids[$value->nid]['changed'] =$value->changed;
      }
    }
    return $event_nids;
}

function getCurrentTimestampfromdate($get_user_timezone, $date, $nDays){
  $start_date_obj = new \DateTime($date , new \DateTimeZone('UTC'));
  $start_date_obj->setTimezone(new \DateTimeZone($get_user_timezone));
  $start_date_timestamp = $start_date_obj->getTimestamp();
  if($nDays){
    $release_time = date('Y-m-d',strtotime('-'.$nDays.'day', $start_date_timestamp));
  }
  else{
    $release_time = date('Y-m-d', $start_date_timestamp);
  }
  return $release_time;
}


function getMandaysFromAuditType($type, $value, $additional_mandays1, $additional_mandays2){
  $mandays = 0;
  $total = 0;
  switch ($type) {
    case 'systems':
      if($value <= 10){
        $mandays = 4;
      }
      elseif ($value >= 11 && $value < 100) {
        $mandays += 8;
      }
      elseif ($value >= 101 && $value < 500) {
        $mandays += 12;
      }
      elseif ($value >= 501 && $value < 1000) {
        $mandays += 20;
      }
      elseif ($value >= 1001 && $value < 1500) {
        $mandays += 24;
      }
      elseif ($value >= 1501 && $value < 2000) {
        $mandays += 30;
      }
      
      if(isset($additional_mandays1) || isset($additional_mandays2)){
        if($additional_mandays1 > 10){
          $mandays += 4;
        }
        else{
          $mandays += 2;
        }

        if($additional_mandays2 <= 500){
          $mandays += 2;
        }
        elseif($additional_mandays2 >= 501 && $additional_mandays2 < 1000){
          $mandays += 4;
        }
        elseif($additional_mandays2 > 1000){
          $mandays += 6;
        }
      }

      $total += $mandays;
      break;
    
    case 'process':
      if(isset($value)){ //For manufacturing process.
        if($value >= 1 && $value < 5){
          $mandays += 2;
        }
        elseif ($value >= 6 && $value < 10) {
          $mandays += 4;
        }
        elseif ($value >= 11 && $value < 15) {
          $mandays += 6;
        }
        elseif ($value > 15) {
          $mandays += 8;
        }
        else{
          $mandays += 0;
        }
      }

      if(isset($additional_mandays1)){ //For assembly process.
        if($additional_mandays1 >= 1 && $additional_mandays1 < 20){
          $mandays += 4;
        }
        elseif ($additional_mandays1 >= 21 && $additional_mandays1 < 40) {
          $mandays += 8;
        }
        elseif ($additional_mandays1 >= 41 && $additional_mandays1 < 60) {
          $mandays += 12;
        }
        elseif ($additional_mandays1 > 60) {
          $mandays += 8;
        }
        else{
          $mandays += 0;
        }
      }

      $total += $mandays;
      break;

    case 'product':
      if($value >= 1 && $value < 10){
        $mandays += 1;
      }
      elseif ($value >= 11 && $value < 20) {
        $mandays += 2;
      }
      elseif ($value > 20) {
        $mandays += 3;
      }

      $total += $mandays;
    break;
  }
  return $total;
}


function getAuditCycleObjectCurrentUnit($unit_reference){
  $query = \Drupal::database()->select('audit_cycle__field_unit_reference', 'h');
  $query->fields('h',['entity_id']);
  $query->condition('h.field_unit_reference_target_id', $unit_reference);
  $query->range(0, 1);
  $nids = $query->execute()->fetchAll();
  $node_storage = \Drupal::entityManager()->getStorage('audit_cycle');
  $entity_audit_cycle = $node_storage->load($nids[0]->entity_id);
  return $entity_audit_cycle;
}

function notify($user_id=NULL, $nid, $message){
  $user_timezone =  drupal_get_user_timezone();
  $notifictaion_insert = \Drupal::database()->insert('notifications');
  if(isset($user_id)){
    $uid = $user_id;
  }
  else{
    $uid = \Drupal::currentUser()->id();
  }
  $get_current_timestamp = getCurrentTimestamp($user_timezone);
  $notifictaion_insert->fields([
    'nid' => $nid,
    'uid' => $uid,
    'message' => $message,
    'timestamp' => $get_current_timestamp,
    'status' => 0,
  ]);
  if($notifictaion_insert->execute()){
    return true;
  }
}