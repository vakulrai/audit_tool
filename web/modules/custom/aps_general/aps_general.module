<?php

/**
 * @file
 * Contains aps_general.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\Core\Link;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;


/**
 * Implements hook_help().
 */
function aps_general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the aps_general module.
    case 'help.page.aps_general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('General APS Functionality') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function aps_general_theme() {
  return [
    'aps_general' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function aps_general_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  //Condition for Unit Add form
  if($form_id == 'node_unit_form'){
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_general_unit_page_redirect';
      }
    }
  }

  //Condition for Procedure Add form
  if($form_id == 'node_procedures_form'){
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_general_procedures_page_redirect';
      }
    }
  }
  
  //Condition for Business Add form
  if($form_id == 'node_business_process_form'){
    $form['field_refere']['#access'] = FALSE;
    if($id = \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_business_process_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_business_process_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Department Add form
  if($form_id == 'node_department_form'){
    $form['field_refere']['#access'] = FALSE;
    if($id = \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_department_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_department_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Section Add form
  if($form_id == 'node_section_form'){
    $form['field_refere']['#access'] = FALSE;
    if($id= \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_section_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_section_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for External Audit Add form
  if($form_id == 'node_external_audit__form'){
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_ext_audit_page_redirect';
      }
    }
  }

  //Condition for Clauses Add form
  if($form_id == 'node_clauses_form'){
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_clauses_page_redirect';
      }
    }
  }

  //Condition for Assembly Add form
  if($form_id == 'node_assembly_form'){
    $form['field_refere']['#access'] = FALSE;
    if($id= \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_assembly_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_assembly_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  if($form_id == 'user_register_form'){
    if($form['account']['roles']){
      $form['account']['roles']['#type'] = 'select';
    }
    if(\Drupal::request()->query->get('type') == 'default'){
      $method = 'aps_assembly_user_redirect_default';
      $form['field_functions']['#access'] = FALSE;
    }
    else{
      $method = 'aps_assembly_user_redirect_auditor';
      $form['field_functions']['#access'] = TRUE;
    }
    
    $form['account']['status']['#access'] = FALSE;
    $form['account']['name']['#weight'] = -1;
    $form['account']['name']['#title'] = t('Name');
    $value = [    
      'value' => NULL,
      'country' => "IN",
      'local_number' => NULL,
      'verified' => NULL,
      'tfa' => NULL,
    ];
    $form['field_phone']['widget'][0]['#default_value'] = $value;
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = $method;
      }
    }
  }

  if($form_id == 'node_customers_manual_edit_form'){
    $form['field_sr_no']['#access'] = FALSE;
    $form['field_version_date']['#access'] = FALSE;
    $form['title']['#access'] = FALSE;
    $form['field_version_level']['#access'] = FALSE;
  }

  if($form_id == 'node_external_audit__form' || $form_id == 'node_external_audit__edit_form'){
    $form['field_audit_type']['#access'] = FALSE;
  }
  
  if($form_id == 'customer_manual_parts_parts_form'){
    if($nid = \Drupal::request()->query->get('id')){
      $form['field_reference_id']['widget'][0]['target_id']['#default_value'] = Node::load($nid);
      foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'parts_redirect';
      }
    }
    }
  }

}

/**
 * Implements  hook_entity_insert().
 */
function aps_general_node_insert(Node $node) {
  $node->setPublished(TRUE);
  $node->save();
  if($node->bundle() == 'assembly'){
    $title = $node->get('title')->value;
    $term = Term::create([
      'name' => $title, 
      'vid' => 'assembly_type',
    ])->save();
  }
}

/**
 * Implements  hook_entity_insert().
 */
function aps_general_customer_manual_parts_insert(Drupal\eck\Entity\EckEntity $entity) {
  
}

/**
 * Implements  hook_preprocess_page().
 */
function aps_general_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof  \Drupal\node\NodeInterface) {
    $nid_type = $node->bundle();
  }
  if($route_name == 'entity.node.edit_form' && $nid_type == 'customers_manual'){
    //*** Rendering parts block ***//
    $view = \Drupal\views\Views::getView('customer_manual_parts');
    $view->setDisplay('parts');
    $title = $view->getTitle();
    $render = $view->render();
    $the_title_render_array = [
      '#markup' => '<h1>'.$title.'</h1>',
      '#allowed_tags' => ['h1'],
    ];

    //*** Rendering CSv Block ***//
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [];
    $plugin_block = $block_manager->createInstance('csv_import_block', $config);
    $render_csv = $plugin_block->build();
    $variables['page']['content']['csv'] = $render_csv;
    
    $variables['page']['content'][] = $the_title_render_array;
    $variables['page']['content']['parts'] = $render;
  }
}

/**
 * Implements  hook_menu_local_tasks_alter().
 */
function aps_general_menu_local_tasks_alter(&$data, $route_name, $root_path) {
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if(isset($uri[2])){
    if ($uri[2] == 'external_audit_') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs']);
      }
    }
    elseif ($uri[2] == 'unit') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs']);
      }
    }
    elseif ($uri[2] == 'internal_audit') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs'][0]['aps_general.standards']);
        unset($data['tabs'][0]['aps_general.clauses']); 
        unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
      }
    }
    elseif (stripos(strtolower($uri[2]), 'planned_events?') !== false) {
        unset($data['tabs']);
    }
    elseif ($uri[2] == 'customers_manual') {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'section?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'assembly?') !== false) {
        unset($data['tabs']);
    }
    elseif ($uri[2] == 'procedures') {
      unset($data['tabs']);
    }
  }

  if($uri[0] = 'audit_criteria' && $uri[2] = 'edit'){
    $data['tabs'][0]['aps_general.process_setting']['#link']['url'] = Url::fromUserInput('/audit_criteria_process/1/edit');
    $data['tabs'][0]['aps_general.product_setting']['#link']['url'] = Url::fromUserInput('/audit_criteria_product/1/edit');
  }
  if ($current_uri == 'audit_criteria/1/edit') {
    $data['tabs'][0]['eck.entity_content:audit_criteria.eck_edit_tab']['#link']['title'] = 'Systems';
    unset($data['tabs'][0]['aps_general.systems_setting']);
  }
  if($current_uri == 'internal-audit-list'){
    unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
    unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
  }
}

/**
 * Implements  hook_entity_insert().
 */
function aps_general_user_insert(User $user) {
  if(\Drupal::request()->query->get('type') == 'auditor'){
    $user->addRole('auditor');
    $user->save();
  }
}

/**
 * Implements hook_views_query_alter().
 */
// function aps_general_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  
// }

function aps_general_views_pre_render(ViewExecutable $view) {
  if($view->id() == "planned_audit_listing" && $view->current_display == 'planned_audit'){
  }
}

/**
 * Implements hook_link_alter().
 */
function aps_general_link_alter(&$variables) { 
  $route_name = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if ($node instanceof \Drupal\node\NodeInterface) {
    $nid_type = $node->bundle();
  }
  if($route_name == 'entity.node.edit_form' && $nid_type == 'customers_manual'){
    $linkText = $variables['text'];
    $cleanLinkText = rtrim(strip_tags($linkText));
    if ($cleanLinkText == 'Add Manual Parts') {
      $variables['options']['query'] = ['id' => $node->id()];
    }
  }

  if ($route_name == 'view.planned_audit_listing.page_1') {
    $linkText = $variables['text'];
    $cleanLinkText = rtrim(strip_tags($linkText));
    if ($cleanLinkText == 'Documents') { 
      $get_nid = explode('?', $uri[1]);
      $url = Url::fromRoute('view.planned_audit_listing.document_list_ia',['nid' => $get_nid[0]]);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }
}

/**
 * Callback method after unit form submits.
 */
function aps_general_unit_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/unit-registration-view');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after business process form submits.
 */
function aps_business_process_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/business-process-listing-view');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after department form submits.
 */
function aps_department_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $response = Url::fromUserInput('/node/add/section?id='.$nid);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after department form submits.
 */
function aps_section_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $response = Url::fromUserInput('/node/add/assembly?id='.$nid);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after assembly form submits.
 */
function aps_assembly_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/unit-registration-view');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after user form submits.
 */
function aps_assembly_user_redirect_default(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/user-listing-all');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after user form submits.
 */
function aps_assembly_user_redirect_auditor(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/user-listing-auditor');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after procedure form submits.
 */
function aps_general_procedures_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after Ext. Audit form submits.
 */
function aps_ext_audit_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/external-audit-standards');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after Clauses form submits.
 */
function aps_clauses_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/external-audit-standards');
  $form_state->setRedirectUrl($response);
}

function parts_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/node/add/customers_manual');
  $form_state->setRedirectUrl($response);
}