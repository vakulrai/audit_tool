<?php

/**
 * @file
 * Contains aps_general.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\User;
use Drupal\Core\Link;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\RemoveCommand;
use Drupal\Component\Datetime\DateTimePlus;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\field\Entity\FieldStorageConfig;
use \Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\ContentEntityInterface;



/**
 * Implements hook_help().
 */
function aps_general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the aps_general module.
    case 'help.page.aps_general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('General APS Functionality') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function aps_general_theme() {
  return [
    'aps_general' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function aps_general_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  //Condition for Unit Add form
  if($form_id == 'node_unit_form'){
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_general_unit_page_redirect';
      }
    }
  }

  //Condition for Procedure Add form
  if($form_id == 'node_procedures_form'){
    $form['field_refere']['#access'] = FALSE;
     if($id = \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_general_procedures_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_procedures_edit_form') {
    $form['field_refere']['#access'] = FALSE;
  }
  
  //Condition for Business Add form
  if($form_id == 'node_business_process_form'){
    $form['field_refere']['#access'] = FALSE;
    if($id = \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'add_department';
      }
    }
    $form['actions']['continue_dept'] = array(
      '#type' => 'submit',
      '#weight' => 999,
      '#limit_validation_errors' => array() ,
      '#button_type' => 'submit',
      '#submit' => array(
        'aps_business_process_page_redirect'
      ) ,
      '#value' => t('Continue to Department') ,
    );

  }
  elseif ($form_id == 'node_business_process_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Department Add form
  if($form_id == 'node_department_form'){
    $form['field_refere']['#access'] = FALSE;
    if($id = \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'add_section';
      }
    }
    $form['actions']['continue_dept'] = array(
      '#type' => 'submit',
      '#weight' => 999,
      '#limit_validation_errors' => array() ,
      '#button_type' => 'submit',
      '#submit' => array(
        'aps_department_page_redirect'
      ) ,
      '#value' => t('Continue to Section') ,
    );
  }
  elseif ($form_id == 'node_department_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Section Add form
  if($form_id == 'node_section_form'){
    $form['field_refere']['#access'] = FALSE;
    if($unit_ref= \Drupal::request()->query->get('unit_ref')){
      $unit_ref_object = Node::load($unit_ref);
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
      }
      $form['field_shift']['widget']['#default_value'] = $def_values;
    }
    if($id= \Drupal::request()->query->get('id')){
      $node_object = Node::load($id);
      $form['field_refere']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    // $form['actions']['submit']['continue_dept'] = array(
    //   '#type' => 'submit',
    //   '#weight' => 999,
    //   '#button_type' => 'submit',
    //   '#submit' => array(
    //     'aps_section_page_redirect'
    //   ) ,
    //   '#value' => t('Continue to Assembly') ,
    // );
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_section_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_section_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  //Condition for External Audit Add form
  if($form_id == 'node_external_audit__form'){
    $form['field_refere']['#access'] = FALSE;
    if($unit_ref= \Drupal::request()->query->get('unit_reference')){
      $unit_ref_object = Node::load($unit_ref);
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
      }
      $form['field_shift']['widget']['#default_value'] = $def_values;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_ext_audit_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_external_audit__edit_form') {
    // $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Clauses Add form
  if($form_id == 'node_clauses_form'){
    $form['field_refere']['#access'] = FALSE;
    if($unit_ref= \Drupal::request()->query->get('unit_reference')){
      $unit_ref_object = Node::load($unit_ref);
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
      }
      $form['field_shift']['widget']['#default_value'] = $def_values;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_clauses_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_clauses_edit_form') {
    // $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Assembly Add form
  if($form_id == 'node_assembly_form'){
    $form['field_refere']['#access'] = FALSE;
    if($unit_ref= \Drupal::request()->query->get('unit_ref')){
      $unit_ref_object = Node::load($unit_ref);
      $unit_refernced_shift = $unit_ref_object->field_shift->getValue();
      foreach ($unit_refernced_shift as $key => $value) {
        $def_values[$value['target_id']] = $value['target_id'];
      }
      $form['field_shift']['widget']['#default_value'] = $def_values;
    }
    if(\Drupal::request()->query->get('section_reference') && \Drupal::request()->query->get('id')){
      $section_reference= \Drupal::request()->query->get('section_reference');
      $unit_reference= \Drupal::request()->query->get('id');
      $node_referenced = [$section_reference, $unit_reference];
      $node_object= node_load_multiple($node_referenced);
      $form['field_refere']['widget']['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_assembly_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_assembly_edit_form') {//Edit form
    // $form['field_refere']['#access'] = FALSE;
  }

  //Condition for Manufacturing Process
  if($form_id == 'node_manufacturing_process_form'){
    $form['field_refere']['#access'] = FALSE;
    if(\Drupal::request()->query->get('section_reference') && \Drupal::request()->query->get('id')){
      $section_reference= \Drupal::request()->query->get('section_reference');
      $unit_reference= \Drupal::request()->query->get('id');
      $node_referenced = [$section_reference, $unit_reference];
      $node_object= node_load_multiple($node_referenced);
      $form['field_refere']['widget']['target_id']['#default_value'] = $node_object;
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aps_assembly_page_redirect';
      }
    }
  }
  elseif ($form_id == 'node_manufacturing_process_edit_form') {//Edit form
    $form['field_refere']['#access'] = FALSE;
  }

  if($form_id == 'user_register_form'){
    $form['#title'] = 'Add Roles';
    if($form['account']['roles']){
      $form['account']['roles']['#type'] = 'select';
    }
    if(\Drupal::request()->query->get('type') == 'default'){
      $method = 'aps_assembly_user_redirect_default';
      $form['field_functions']['#access'] = FALSE;
    }
    else{
      $method = 'aps_assembly_user_redirect_auditor';
      $form['field_functions']['#access'] = TRUE;
    }
    
    $form['account']['status']['#access'] = FALSE;
    $form['account']['name']['#weight'] = -1;
    $form['account']['name']['#title'] = t('Name');
    $value = [    
      'value' => NULL,
      'country' => "IN",
      'local_number' => NULL,
      'verified' => NULL,
      'tfa' => NULL,
    ];
    $form['field_phone']['widget'][0]['#default_value'] = $value;
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = $method;
      }
    }
  }

  if($form_id == 'node_customers_manual_edit_form'){
    $form['field_sr_no']['#access'] = FALSE;
    $form['field_version_date']['#access'] = FALSE;
    $form['title']['#access'] = FALSE;
    $form['field_version_level']['#access'] = FALSE;
  }
  elseif ($form_id == 'node_customers_manual_form') {
    $form['field_reference_id']['#access'] = FALSE;
  }

  if($form_id == 'node_external_audit__form' || $form_id == 'node_external_audit__edit_form'){
    $form['field_audit_type']['#access'] = FALSE;
  }
  
  if($form_id == 'customer_manual_parts_parts_form'){
    if($nid = \Drupal::request()->query->get('id')){
      $form['field_reference_id']['widget'][0]['target_id']['#default_value'] = Node::load($nid);
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'parts_redirect';
        }
      }
    }
    $form['field_reference_id']['#access'] = FALSE;
  }
  if($form_id == 'node_business_process_form'){
    $form['field_business_process_efficienc']['widget'][0]['subform']['field_other']['#states'] = [
      'visible' => [
        'select[name="field_business_process_efficienc[0][subform][field_uom]"]' => ['value' => '73']
      ],
    ];

    $form['field_business_process_effective']['widget'][0]['subform']['field_other']['#states'] = [
      'visible' => [
        'select[name="field_business_process_effective[0][subform][field_uom]"]' => ['value' => '73']
      ],
    ];
  }
 
  if($form_id == 'customer_manual_parts_parts_form' || $form_id == 'customer_manual_parts_parts_edit_form'){
    $form['field_add_parts']['widget'][0]['top']['paragraph_type_title']['info']['#markup'] = 'Products';

    $form['field_add_parts']['widget']['add_more']['add_more_button_customer_manual_parts']['#value'] = new TranslatableMarkup("@type", array(
       '@type' => 'Add Product',
    ));
  }

  if($form_id == 'node_internal_audit_form'){
    if(\Drupal::request()->query->get('unit_reference')){
      $id = (int) \Drupal::request()->query->get('unit_reference');
      $unit_ref_object = Node::load($id);
      $unit_id = $unit_ref_object->id();
      $form['field_unit']['widget']['#default_value'] = $unit_id;
    }
   
  }
  elseif ($form_id == 'node_internal_audit_edit_form') {
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    foreach ($roles as $key => $value) {
      $user_role = $value;
    }
    if($user_role == 'auditee'){
      $form['field_unit']['#access'] = FALSE;
      $form['field_ia_section']['#access'] = FALSE;
      $form['field_ia_department']['#access'] = FALSE;
      $form['field_procedure_no']['#access'] = FALSE;
      $form['field_audit_type']['#access'] = FALSE;
      $form['field_audit_date']['#access'] = FALSE;
      $form['title']['#access'] = FALSE;
    }
  }
}
/**
 * Implements  hook_entity_insert().
 */
function aps_general_node_insert(Node $node) {
  $node->setPublished(TRUE);
  $node->save();
  if($node->bundle() == 'assembly'){
    $title = $node->get('title')->value;
    $term = Term::create([
      'name' => $title, 
      'vid' => 'assembly_type',
    ])->save();
  }
  if($node->bundle() == 'unit'){
    // $title = $node->get('title')->value;
    // $field_address = $node->get('field_address')->locality;
    // $field_remote_location = $node->get('field_remote_address')->locality;
    
    // $vid_to_check = strtolower(preg_replace('/\s+/', '_', $title));
    // $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple();
    // if(!isset($vocabularies[$vid_to_check])){
    //   $vocabulary = Vocabulary::create([
    //     'vid' => $vid_to_check,
    //     'description' => 'Vocabluary for '.$title,
    //     'name' => 'Vocabulary for ' .$title,
    //   ])->save();
    // }

    // $term = Term::create([
    //   'name' => 'Location', 
    //   'vid' => $vid_to_check,
    // ]);
    // $inserted_or_updated = $term->save();
    // $tid = $term->id();

    // $term_location = Term::create([
    // 'name' => $field_address, 
    // 'vid' => $vid_to_check,
    // 'parent' => [$tid],
    // ]);
    // $inserted_or_updated_location = $term_location->save();
    // $tid_location = $term_location->id();

    // $term_location_remote = Term::create([
    //   'name' => $field_remote_location, 
    //   'vid' => $vid_to_check,
    //   'parent' => [$tid],
    // ])->save();

    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('aps_general.unitregistration');
    $config->set('unit_registered', $node->id());
    $config->save(TRUE);

  }
  if($node->bundle() == 'business_process'){
    $bp_title = $node->get('title')->value;
    $vid_bp = preg_replace('/\s+/', '_', $bp_title);
    //UNit reference
    $unit_id = \Drupal::request()->query->get('id');
    $unit_object = Node::load($unit_id);
    $unit_title = $unit_object->get('title')->value;
    $vid_unit = strtolower(preg_replace('/\s+/', '_', $unit_title));
    $head_name = $node->get('field_business_head_name')->value;
    $term = Term::create([
      'name' => 'Business Process', 
      'vid' => $vid_unit,
    ]);

    $inserted_or_updated = $term->save();
    $tid = $term->id();

    $term = Term::create([
      'name' => $head_name, 
      'vid' => $vid_unit,
      'parent' => [$tid],
    ])->save();
  }
  if($node->bundle() == 'internal_audit'){
    $node->set('moderation_state', 'pre_audit');
    $node->save();
  }
  if($node->bundle() == 'planned_events'){
    $entity = getPlannedEventCount();
    $node_load_multiple = Node::loadMultiple($entity);
    $count_systems = 0;
    $count_process = 0;
    $count_product = 0;
    $count_external = 0;
    $count_supplier = 0;
    $count_ia = 0;
    $count_ea = 0;
    foreach ($node_load_multiple as $key => $value) {
      if($value->field_audit_type->value == 'internal' && $value->field_internal_audit_type->value == 'systems'){
        $id_system[] = $key; 
        $count_systems = count($id_system);
      }
      elseif ($value->field_audit_type->value == 'internal' && $value->field_internal_audit_type->value == 'process') {
        $id_process[] = $key; 
        $count_process = count($id_process);
      }
      elseif ($value->field_audit_type->value == 'internal' && $value->field_internal_audit_type->value == 'product') {
        $id_product[] = $key; 
        $count_product = count($id_product);
      }
      elseif ($value->field_audit_type->value == 'external') {
        $id_external[] = $key; 
        $count_external = count($id_external);
      }
      elseif ($value->field_audit_type->value == 'supplier') {
        $id_supplier[] = $key; 
        $count_supplier = count($id_supplier);
      }
      elseif ($value->field_audit_type->value == 'customer' && $value->field_customer_type->value == 'internal_assessment') {
        $id_ia[] = $key; 
        $count_ia = count($id_ia);
      }
      elseif ($value->field_audit_type->value == 'customer' && $value->field_customer_type->value == 'external_assessment') {
        $id_ea[] = $key; 
        $count_ea = count($id_ea);
      }
      else{
        $title_val = 'Systems Audit';
      }
    }
    
    if($node->field_audit_type->value == 'internal'){
      if($node->field_internal_audit_type->value == 'systems'){
        $val = $count_systems;
        $title_val = 'IS'.$val;
      }
      elseif ($node->field_internal_audit_type->value == 'process') {
        $val = $count_process;
        $title_val = 'IP'.$val;
      }
      elseif ($node->field_internal_audit_type->value == 'product') {
        $val = $count_product;
        $title_val = 'IPR'.$val;
      }
      else{
        $title_val = 'Systems Audit';
      }
    }
    elseif ($node->field_audit_type->value == 'external') {
      $val = $count_external;
      $title_val = 'EA'.$val;
    }
    elseif ($node->field_audit_type->value == 'supplier') {
      $val = $count_supplier;
      $title_val = 'S'.$val;
    }
    elseif ($node->field_audit_type->value == 'customer') {
      if($node->field_customer_type->value == 'internal_assessment'){
        $val = $count_ia;
        $title_val = 'ICA'.$val;
      }
      elseif ($node->field_customer_type->value == 'external_assessment') {
        $val = $count_ea;
        $title_val = 'ECA'.$val;
      }
    }
    else{
        $title_val = 'Systems Audit';
      }
    $node->set('title', $title_val);
    $node->set('moderation_state', 'scheduled');
    $node->save();
  }
}

/**
 * Method to get count of Planned events.
 */
function getPlannedEventCount(){
  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1);
  $query->condition('type', 'planned_events');
  $entity_ids = $query->execute();
  return $entity_ids;
}

/**
 * Implements  hook_entity_presave().
 */
function aps_general_node_presave(Node $node) {
 if($node->bundle() == 'planned_events'){
    if($suggested_date = $node->get('field_suggested_date')->value){
      $current_user = \Drupal::currentUser();
      $roles = $current_user->getRoles();
      foreach ($roles as $key => $value) {
        $user_role = $value;
      }
      $user_timezone =  drupal_get_user_timezone();
      $get_current_timestamp = getCurrentTimestamp($user_timezone);
      if($user_role == 'auditor' || $user_role == 'auditee'){
        $notifictaion_insert = \Drupal::database()->insert('notifications');
        $message = 'Reschedule the audit to '.$suggested_date;
        $notifictaion_insert->fields([
          'nid' => $node->id(),
          'uid' => $current_user->id(),
          'message' => $message,
          'timestamp' => $get_current_timestamp,
          'status' => 0,
        ]);
        $notifictaion_insert->execute();
      }
    }
  }
}

/**
 * Implements  hook_entity_create().
 */
function aps_general_node_create(Node $entity) {
  if ($entity->bundle() == 'procedures') {
    $config = \Drupal::service('config.factory')->getEditable('aps_general.adduserroles');
    $current_count = $config->get('current_count');
    if($current_count == 0){
      $count = $config->get('default_count');
    }
    elseif ($current_count > 0) {
      $count = $config->get('current_count');
    }
    if($entity->isNew()){
      $paragraph = Paragraph::create([
        'field_s_no' => $count,
        'type' => 'procedures',
      ]);
      $paragraph->save();
      $paragraphp_version = [
        [
          'target_id' => $paragraph->id(),
          'target_revision_id' => $paragraph->getRevisionId(),
        ],
      ];
      $entity->set('field_create_procedure', $paragraphp_version);
      $config->set('previous_count', $count);
      $config->set('current_count', $count + 1);
      $config->save();
    }
  }
}

/**
 * Implements  hook_preprocess_page().
 */
function aps_general_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof  \Drupal\node\NodeInterface) {
    $nid_type = $node->bundle();
  }
  if($route_name == 'view.customer_manual_parts.product_listing'){
    //*** Rendering parts block ***//
    $view = \Drupal\views\Views::getView('customer_manual_parts');
    $view->setDisplay('parts');
    $title = $view->getTitle();
    $render = $view->render();
    $the_title_render_array = [
      '#markup' => '<h1>'.$title.'</h1>',
      '#allowed_tags' => ['h1'],
    ];

    //*** Rendering CSv Block ***//
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [];
    $plugin_block = $block_manager->createInstance('csv_import_block', $config);
    $render_csv = $plugin_block->build();
    $variables['page']['content']['csv'] = $render_csv;
  }
  // if (\Drupal::routeMatch()->getRouteName() == 'view.user_registration_view.registration') {
    Drupal\Core\Cache\Cache::invalidateTags(['local_task']);
  // }
}

/**
 * Implements  hook_menu_local_tasks_alter().
 */
function aps_general_menu_local_tasks_alter(&$data, $route_name, $root_path) {
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  foreach ($roles as $key => $value) {
    $user_role = $value;
  }
  if(isset($uri[2])){
    if (stripos(strtolower($uri[2]), 'external_audit_?') !== false) {
      unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
      unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
      unset($data['tabs'][0]['aps_general.manual']);
      unset($data['tabs'][0]['aps_general.manual_product']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:procedure_listing']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:audit_list']);
      unset($data['tabs'][0]['aps_pre_audit.manuals:systems']);
      $data['tabs'][0]['aps_pre_audit.manuals:external_audit_systems']['#active'] = TRUE;
    }
    if (stripos(strtolower($uri[2]), 'clauses?') !== false) {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
        unset($data['tabs'][0]['aps_general.manual']);
        unset($data['tabs'][0]['aps_general.manual_product']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:procedure_listing']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:audit_list']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:systems']);
        $data['tabs'][0]['aps_pre_audit.manuals:external_audit_clauses']['#active'] = TRUE;
      }
    }
    elseif ($uri[2] == 'unit') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs']);
      }
    }
    elseif ($uri[2] == 'department') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs']);
      }
    }
     elseif (stripos(strtolower($uri[2]), 'department?') !== false) {
        unset($data['tabs']);
    }
     elseif (stripos(strtolower($uri[2]), 'business_process?') !== false) {
        unset($data['tabs']);
    }
    elseif ($uri[2] == 'internal_audit') {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs'][0]['aps_general.standards']);
        unset($data['tabs'][0]['aps_general.clauses']); 
        unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
        unset($data['tabs'][0]['aps_general.manual']);
        unset($data['tabs'][0]['aps_general.manual_product']);
      }
    }
    elseif (stripos(strtolower($uri[2]), 'internal_audit?') !== false) {
      $link = Url::fromUserInput('/node/add/'.$uri[2]);
      if ($link) {
        unset($data['tabs'][0]['aps_general.standards']);
        unset($data['tabs'][0]['aps_general.clauses']); 
        unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
        unset($data['tabs'][0]['aps_general.manual']);
        unset($data['tabs'][0]['aps_general.manual_product']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:procedure_listing']);
        $data['tabs'][0]['aps_pre_audit.manuals:systems']['#active'] = TRUE;
      }
    }
    elseif (stripos(strtolower($uri[2]), 'planned_events?') !== false) {
        unset($data['tabs']);
    }
    elseif ($uri[2] == 'customers_manual?destination=node') {
        unset($data['tabs'][0]['aps_general.standards']);
        unset($data['tabs'][0]['aps_general.clauses']); 
        unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
        unset($data['tabs'][0]['aps_audit_criteria.audit_list']);
        unset($data['tabs'][0]['aps_audit_criteria.systems_setting']);
        unset($data['tabs'][0]['aps_pre_audit.manuals:add_procedures']);
    }
    elseif ($uri[2] == 'customers_manual') {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'section?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'answers?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'assembly?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'internal_documents?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'manufacturing_process?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'pre_audit_records?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'pre_audit_manuals?') !== false) {
        unset($data['tabs']);
    }
    elseif (stripos(strtolower($uri[2]), 'procedures?') !== false) {
      unset($data['tabs'][0]['aps_general.manual']);
      unset($data['tabs'][0]['aps_general.manual_product']);  
      unset($data['tabs'][0]['aps_general.clauses']); 
      unset($data['tabs'][0]['aps_pre_audit.manuals:audit_list']); 
      unset($data['tabs'][0]['aps_pre_audit.manuals:systems']); 
      unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
      unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
      unset($data['tabs'][0]['aps_audit_criteria.audit_list']);
      unset($data['tabs'][0]['aps_audit_criteria.systems_setting']);
      unset($data['tabs'][0]['aps_general.standards']);
      $data['tabs'][0]['aps_pre_audit.manuals:add_procedures']['#active'] = TRUE;
    }
  }
  if($uri[0] = 'audit_criteria' && $uri[2] = 'edit'){
    $data['tabs'][0]['aps_general.process_setting']['#link']['url'] = Url::fromUserInput('/audit_criteria_process/1/edit');
    $data['tabs'][0]['aps_general.product_setting']['#link']['url'] = Url::fromUserInput('/audit_criteria_product/1/edit');
  }
  if (stripos(strtolower($current_uri), 'audit_criteria/1/edit?') !== false) {
    $data['tabs'][0]['eck.entity_content:audit_criteria.eck_edit_tab']['#link']['title'] = 'Systems';
    unset($data['tabs'][0]['aps_general.systems_setting']);
  }
  if(stripos(strtolower($current_uri), 'internal-audit-list?') !== false){
    unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
    unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
    $data['tabs'][0]['aps_pre_audit.manuals:audit_list']['#active'] = TRUE;
  }
  if($current_uri == 'internal-audit-list'){
    unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
    unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
  }
  if($route_name == 'view.planned_audit_listing.document_list_ia'){
    if($user_role == 'auditor'){
      $config = \Drupal::service('config.factory')->getEditable('aps_general.adduserroles');
      if($config->get('doc_id')){
        $id = $config->get('doc_id');
      }
      if($id){
        $data['tabs'][0]['aps_pre_audit.manuals:internal_documents']['#link']['url']->setRouteParameters(['arg_0' => $id]);
      }
    }
  }
  if(stripos(strtolower($current_uri), 'procedure-listing?') !== false){
    unset($data['tabs'][0]['aps_audit_criteria.process_setting']);
    unset($data['tabs'][0]['aps_audit_criteria.product_setting']);
    unset($data['tabs'][0]['aps_general.clauses']); 
    unset($data['tabs'][0]['aps_general.standards']);
    $data['tabs'][0]['aps_pre_audit.manuals:procedure_listing']['#active'] = TRUE;
  }
}

/**
 * Implements  hook_entity_insert().
 */
function aps_general_user_insert(User $user) {
  if(\Drupal::request()->query->get('type') == 'auditor'){
    $user->addRole('auditor');
    $user->save();
  }
}

/**
 * Implements hook_views_query_alter().
 */
function aps_general_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // if($view->id() === 'registered_unit_listing'){
  //   $config_factory = \Drupal::configFactory();
  //   $config = $config_factory->getEditable('aps_general.unitregistration');
  //   $registered_unit = $config->get('unit_registered');
  //   if($view->getDisplay()->display['id'] == 'bp'){
  //     $definition = [
  //       'table' => 'node__field_refere',
  //       'field' => 'entity_id',
  //       'left_table' => 'node_field_data',
  //       'left_field' => 'nid',
  //     ];
  //     $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
  //     $query->addRelationship('node__field_refere', $join, 'node');
  //     $query->addWhere('AND', 'node__field_refere.bundle', 'business_process');
  //     $query->addWhere('AND', 'node__field_refere.field_refere_target_id', $registered_unit);
  //   }
  //   if($view->getDisplay()->display['id'] == 'section_list'){
  //     $config_factory = \Drupal::configFactory();
  //     $config = $config_factory->getEditable('aps_general.unitregistration');
  //     $registered_unit = $config->get('unit_registered');
  //     $definition = [
  //       'table' => 'node__field_refere',
  //       'field' => 'entity_id',
  //       'left_table' => 'node_field_data',
  //       'left_field' => 'nid',
  //     ];
  //     $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
  //     $query->addRelationship('node__field_refere', $join, 'node');
  //     $query->addWhere('AND', 'node__field_refere.field_refere_target_id', $registered_unit);
  //     $query->addWhere('AND', 'node__field_refere.bundle', 'section');
  //   }
  // }
}

function aps_general_views_pre_render(ViewExecutable $view) {
}

/**
 * Implements hook_link_alter().
 */
function aps_general_link_alter(&$variables) { 
  $route_name = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if ($node instanceof \Drupal\node\NodeInterface) {
    $nid_type = $node->bundle();
  }
  if($route_name == 'entity.node.edit_form' && $nid_type == 'customers_manual'){
    $linkText = $variables['text'];
    $cleanLinkText = rtrim(strip_tags($linkText));
    if ($cleanLinkText == 'Add Manual Parts') {
      $variables['options']['query'] = ['id' => $node->id()];
    }
  }

  if ($route_name == 'view.planned_audit_listing.page_1') {
    $config = \Drupal::service('config.factory')->getEditable('aps_pre_audit.getmoreinfo');
    $linkText = $variables['text'];
    $cleanLinkText = rtrim(strip_tags($linkText));
    if ($cleanLinkText == 'Documents') {
      $get_nid = explode('?', $uri[1]);
      $url = Url::fromRoute('view.planned_audit_listing.document_list_ia',['arg_0' => $get_nid[0]]);
      unset($variables['url']);
      $variables['url'] = $url;
      $config->set('nid', $get_nid[0])->save();
    }
  }
  $linkText = $variables['text'];
  $cleanLinkText = rtrim(strip_tags($linkText));
  if ($cleanLinkText == 'Notification') {
    // $query = \Drupal::database()->select('notifications', 'n');
    // $query->fields('n');
    // $nids = $query->execute()->fetchAll();
    $count = 0;
    $title = new TranslatableMarkup("@text", array(
       '@text' => 'Notification'.'('.$count.')',
    ));
    $variables['text'] = $title;
  }

  if ($cleanLinkText == 'Go To Unit Page') {
    $id = \Drupal::request()->query->get('id');
    if($id){
      $url = Url::fromRoute('view.user_registration_view.registration',['arg_0' => $id]);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }
  
  if ($cleanLinkText == 'INFRASTRUCTURE') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Auditors') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'External Audit Details') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Audit Criteria Settings') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Time Cycle Settings') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Audit Checklist') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Internal Audit') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'Internal Audit Process') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'CUSTOMERS') {
    $id = $uri[1];
    if($id){
      $variables['url']->setRouteParameter('unit_reference', $id);
    }
  }

  if ($cleanLinkText == 'AUDIT PLANNING') {
    $id = $uri[1];
    if($id){
      $url =Url::fromUserInput('/audit-planning/'.$id);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }

  if ($cleanLinkText == 'Calendar') {
    $id = $uri[1];
    if($id){
      $url =Url::fromUserInput('/audit-planning/'.$id);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }

  if ($cleanLinkText == 'Audit') {
    $id = $uri[1];
    if($id){
      $url =Url::fromUserInput('/planned-audit-listing/'.$id);
      unset($variables['url']);
      $variables['url'] = $url;
    }
  }
}

function get_user_roles(){
  $roles = user_role_names(TRUE);
  return $roles;
}

function test(){
 $form['field_business_process_efficienc']['widget'][0]['subform']['field_other']['widget']['#access'] = TRUE;
 return $form['field_business_process_efficienc'];
}
/**
 * Callback method after unit form submits.
 */
function aps_general_unit_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $response = Url::fromUserInput('/unit-registration-view/'.$nid);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after business process form submits.
 */
function aps_business_process_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $id = \Drupal::request()->query->get('id');
  $node_object = Node::load($id);
  $title = $node_object->get('title')->value;
  $vid_to_check = strtolower(preg_replace('/\s+/', '_', $title));
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $response = Url::fromUserInput('/node/add/department?id='.$id);
  $form_state->setRedirectUrl($response);
}

function add_department(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $id = \Drupal::request()->query->get('id');
  $response = Url::fromRoute('node.add',['node_type' => 'business_process', 'id' => $id]);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after department form submits.
 */
function aps_department_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_ref = \Drupal::request()->query->get('id');
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $response = Url::fromUserInput('/node/add/section?id='.$unit_ref);
  $form_state->setRedirectUrl($response);
}

function add_section(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $id = \Drupal::request()->query->get('id');
  $response = Url::fromRoute('node.add',['node_type' => 'department', 'id' => $id]);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after department form submits.
 */
function aps_section_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_ref = \Drupal::request()->query->get('id');
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  if($form_values['field_assembly'][0]['value'] == 'assembly'){
    $response = Url::fromRoute('node.add',['node_type' => 'assembly', 'id' => $unit_ref, 'section_reference' => $nid]);
  }
  elseif ($form_values['field_assembly'][0]['value'] == 'manufacturing') {
    $response = Url::fromRoute('node.add',['node_type' => 'manufacturing_process', 'id' => $unit_ref, 'section_reference' => $nid]);
  }
  else{
    $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
    $id = \Drupal::request()->query->get('id');
    $response = Url::fromRoute('node.add',['node_type' => 'section', 'id' => $unit_ref]);
  }
  $form_state->setRedirectUrl($response);
}

function create_assembly(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri_destination = trim(\Drupal::request()->getRequestUri(), '/');
  $id = \Drupal::request()->query->get('id');
  $response = Url::fromRoute('node.add',['node_type' => 'section', 'id' => $id]);
  $form_state->setRedirectUrl($response);
}


/**
 * Callback method after assembly form submits.
 */
function aps_assembly_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $id = \Drupal::request()->query->get('id');
  $response = Url::fromUserInput('/unit-registration-view/'.$id);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after user form submits.
 */
function aps_assembly_user_redirect_default(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/user-listing-all');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after user form submits.
 */
function aps_assembly_user_redirect_auditor(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/user-listing-auditor');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after procedure form submits.
 */
function aps_general_procedures_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $id = \Drupal::request()->query->get('unit_reference');
  $response = Url::fromUserInput('/unit-registration-view/'.$id);
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after Ext. Audit form submits.
 */
function aps_ext_audit_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/external-audit-standards');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after Clauses form submits.
 */
function aps_clauses_page_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/external-audit-standards');
  $form_state->setRedirectUrl($response);
}

function parts_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/node/add/customers_manual');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback to get Current timestamp.
 */
function getCurrentTimestamp($user_timezone){
  $db_timezone = 'UTC';
  $get_current_timestamp =  \Drupal::time()->getCurrentTime();
  $current_date_object = DateTimePlus::createFromTimestamp($get_current_timestamp, $db_timezone);
  $current_date_object->setTimezone(new \DateTimeZone($user_timezone));
  return $current_date_object->getTimestamp();
}

function getTidByName($name = NULL, $vid = NULL) {
  $properties = [];
  if (!empty($name)) {
    $properties['name'] = $name;
  }
  if (!empty($vid)) {
    $properties['vid'] = $vid;
  }
  $terms = \Drupal::entityManager()->getStorage('taxonomy_term')->loadByProperties($properties);
  $term = reset($terms);

  return !empty($term) ? $term->id() : 0;
}

function get_location_from_unit(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable){
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if(\Drupal::request()->query->get('id') && stripos(strtolower($uri[2]), 'department?') !== false || stripos(strtolower($uri[2]), 'section?') !== false){
    $address_option = [];
    $id = \Drupal::request()->query->get('id');
    $node_object = Node::load($id);
    $options = [
      1 => $node_object->field_remote_address->locality,
      2 => $node_object->field_address->locality,
    ];
  }
  else{
    $options = [];
  }
  return $options;
}