<?php

/**
 * @file
 * Contains aps_audit_criteria.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\UrlHelper;
use Drupal\user\Entity\User;
use Drupal\Core\Entity;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ChangedCommand;
use Drupal\Core\Ajax\CssCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\RemoveCommand;


/**
 * Implements hook_help().
 */
function aps_audit_criteria_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the aps_audit_criteria module.
    case 'help.page.aps_audit_criteria':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Contain geenral settings for audit criteria') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function aps_audit_criteria_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  foreach ($roles as $key => $value) {
    $user_role = $value;
  }
  
  $route_name = \Drupal::routeMatch()->getRouteName();
  if($route_name == 'node.add' && count($form['actions'])){
    unset($form['actions']['preview']);
  }
  if ($form_id == 'audit_criteria_customer_customer_form') {
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_unit_reference']['#access'] = FALSE;
    $audit_criteria_customer = \Drupal::entityQuery('audit_criteria_customer');
    $audit_criteria_customer->condition('field_unit_reference', $id);
    $audit_criteria_customer_id = $audit_criteria_customer->execute();
    if(count($audit_criteria_customer_id)){
      $node_storage = \Drupal::entityTypeManager()->getStorage('audit_criteria_customer')->loadMultiple($audit_criteria_customer_id);
      foreach ($node_storage as $node){
         $field_merchant_id = $node->delete();
      }
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'customer_config_redirect';
      }
    }
  }
  elseif ($form_id == 'audit_criteria_customer_customer_edit_form') {
    $form['field_unit_reference']['#access'] = FALSE;
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'customer_config_redirect';
      }
    }
  }

  if ($form_id == 'audit_criteria_supplier_supplier_form') {
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_unit_reference']['#access'] = FALSE;
    $audit_criteria_supplier = \Drupal::entityQuery('audit_criteria_supplier');
    $audit_criteria_supplier->condition('field_unit_reference', $id);
    $audit_criteria_supplier_id = $audit_criteria_supplier->execute();
    if(count($audit_criteria_supplier_id)){
      $node_storage = \Drupal::entityTypeManager()->getStorage('audit_criteria_supplier')->loadMultiple($audit_criteria_supplier_id);
      foreach ($node_storage as $node){
         $field_merchant_id = $node->delete();
      }
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'supplier_config_redirect';
      }
    }
  }
  elseif ($form_id == 'audit_criteria_supplier_supplier_edit_form') {
    $form['field_unit_reference']['#access'] = FALSE;
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'supplier_config_redirect';
      }
    }
  }

  if ($form_id == 'audit_criteria_external_external_form') {
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_unit_reference']['#access'] = FALSE;
    $audit_criteria_external = \Drupal::entityQuery('audit_criteria_external');
    $audit_criteria_external->condition('field_unit_reference', $id);
    $audit_criteria_external_id = $audit_criteria_external->execute();
    if(count($audit_criteria_external_id)){
      $node_storage = \Drupal::entityTypeManager()->getStorage('audit_criteria_external')->loadMultiple($audit_criteria_external_id);
      foreach ($node_storage as $node){
         $field_merchant_id = $node->delete();
      }
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'external_config_redirect';
      }
    }
  }
  elseif ($form_id == 'audit_criteria_external_external_edit_form') {
    $form['field_unit_reference']['#access'] = FALSE;
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'external_config_redirect';
      }
    }
  }

  if ($form_id == 'audit_criteria_process_process_form') {
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_unit_reference']['#access'] = FALSE;
  }
  elseif ($form_id == 'audit_criteria_process_process_edit_form') {
    $form['field_unit_reference']['#access'] = FALSE;
  }

  if ($form_id == 'audit_criteria_product_product_form') {
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_unit_reference']['#access'] = FALSE;
  }
  elseif ($form_id == 'audit_criteria_product_product_edit_form') {
    $form['field_unit_reference']['#access'] = FALSE;
  }


  if ($form_id == 'audit_criteria_score_score_form' || $form_id == 'audit_criteria_score_score_edit_form') {
    if($form_id == 'audit_criteria_score_score_form'){
      $audit_criteria_score = \Drupal::entityQuery('audit_criteria_score');
      $audit_criteria_score->condition('field_unit_reference', $id);
      $audit_criteria_score_id = $audit_criteria_score->execute();
      if(count($audit_criteria_score_id)){
        $node_storage = \Drupal::entityTypeManager()->getStorage('audit_criteria_score')->loadMultiple($audit_criteria_score_id);
        foreach ($node_storage as $node){
           $field_merchant_id = $node->delete();
        }
      }
    }
    $form['field_score_level_set_10']['#attributes'] = ['id' => ['set-10']];
    $form['field_score_level_set_100']['#attributes'] = ['id' => ['set-100']];
    $options_score = getVids('system_documents', 31);
    if(count($options_score)){
       $form['field_score_settings']['widget']['#options'] = $options_score;
    } 
    if(\Drupal::request()->query->get('unit_reference') && $form_id == 'audit_criteria_score_score_form'){
      $id = \Drupal::request()->query->get('unit_reference');
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_unit_reference']['#access'] = FALSE;
    $form['field_score_level_set_10']['#states'] = [
      'visible' => [
        '#edit-field-score-settings-32' => ['checked' => TRUE],
        ],
      ];

      $form['field_score_level_set_10']['#states'] = [
      'invisible' => [
        '#edit-field-score-settings-32' => ['checked' => FALSE],
        ],
      ];

      $form['field_score_level_set_100']['#states'] = [
      'visible' => [
        '#edit-field-score-settings-33' => ['checked' => TRUE],
        ],
      ];

      $form['field_score_level_set_100']['#states'] = [
      'invisible' => [
        '#edit-field-score-settings-33' => ['checked' => FALSE],
        ],
      ];
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'score_config_redirect';
        }
      }
  }
  elseif ($form_id == 'audit_criteria_score_score_edit_form') {
    $form['field_unit_reference']['#access'] = FALSE;
  }
  
	if($form_id == 'audit_criteria_systems_form' || $form_id == 'audit_criteria_systems_edit_form'){
    if($user_role == 'auditor' || $user_role == 'auditee'){
      $entity_type_id = 'audit_criteria';
      $bundle = 'systems';
      foreach (\Drupal::entityManager()->getFieldDefinitions($entity_type_id, $bundle) as $field_name => $field_definition) {
        if (!empty($field_definition->getTargetBundle())) {
          $bundleFields[$field_name]['type'] = $field_definition->getType();
          $bundleFields[$field_name]['label'] = $field_definition->getLabel();
          $form[$field_name]['#disabled'] = TRUE;
        }
      }
      unset($form['actions']);
    }
    if ($form_id == 'audit_criteria_systems_form') {
      if($id= \Drupal::request()->query->get('unit_reference')){
        $node_object = Node::load($id);
        $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
      }
      $audit_criteria_query = \Drupal::entityQuery('audit_criteria');
      $audit_criteria_query->condition('field_unit_reference', $id);
      $audit_criteria_id = $audit_criteria_query->execute();
      if(count($audit_criteria_id)){
        $node_storage = \Drupal::entityTypeManager()->getStorage('audit_criteria')->loadMultiple($audit_criteria_id);
        foreach ($node_storage as $node){
           $field_merchant_id = $node->delete();
        }
      }
    }

    if($form_id == 'audit_criteria_systems_form' || $form_id == 'audit_criteria_systems_edit_form'){
      $form['field_unit_reference']['#access'] = FALSE;
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'system_config_redirect';
        }
      }
    }
	  $options_document = getVids('system_documents', 27);
	  $options_records = getVids('system_documents', 28);
	  // $options_score = getVids('system_documents', 31);
	  if(count($options_document)){
	  	 $form['field_documents']['widget']['#options'] = $options_document;
	  }

	  if(count($options_records)){
	  	 $form['field_records']['widget']['#options'] = $options_records;
	  } 

	  // if(count($options_score)){
	  // 	 $form['field_score_settings']['widget']['#options'] = $options_score;
	  // } 

      $form['field_score_level_set']['#states'] = [
      'visible' => [
        '#edit-field-score-settings-32' => ['checked' => TRUE],
        ],
      ];

      $form['field_score_level_set']['#states'] = [
      'invisible' => [
        '#edit-field-score-settings-32' => ['checked' => FALSE],
        ],
      ];

      $form['field_score_level_set_100']['#states'] = [
      'visible' => [
        '#edit-field-score-settings-33' => ['checked' => TRUE],
        ],
      ];

      $form['field_score_level_set_100']['#states'] = [
      'invisible' => [
        '#edit-field-score-settings-33' => ['checked' => FALSE],
        ],
      ];
      
      unset($form['field_customer_audit']);
	}
  // elseif (condition) {
  //   # code...
  // }

	if($form_id == 'audit_cycle_settings_form' || $form_id == 'audit_cycle_settings_edit_form'){
    $form['field_calendar_date']['#states'] = [
      'visible' => [
        'input[name="field_cycle_type"]' => ['value' => '1'],
      ],
    ];

    $form['field_financial_dates']['#states'] = [
      'visible' => [
        'input[name="field_cycle_type"]' => ['value' => '0'],
      ],
    ];
    $form['field_unit_reference']['#access'] = FALSE;
    if ($form_id == 'audit_cycle_settings_form') {
      if($id= \Drupal::request()->query->get('unit_reference')){
        $node_object = Node::load($id);
        $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
      }
      $audit_cycle= \Drupal::entityQuery('audit_cycle');
      $audit_cycle->condition('field_unit_reference', $id);
      $audit_cycle_id = $audit_cycle->execute();
      if(count($audit_cycle_id)){
        $node_storage = \Drupal::entityTypeManager()->getStorage('audit_cycle')->loadMultiple($audit_cycle_id);
        foreach ($node_storage as $node){
           $field_merchant_id = $node->delete();
        }
      }
      $form['field_unit_reference']['#access'] = FALSE;
      unset($form['field_cycle_type']['widget']['#options']['_none']);
      $form['field_cycle_type']['widget']['#default_value'] = '0';
    }
	  $form['#attached']['library'][] = 'aps_audit_criteria/aps_audit_criteria_js';

      $form['audit_cycle_year'] = [
      '#type' => 'fieldset',
      '#title' => 'YEAR',
      '#weight' => '0',
      ];

      $form['audit_cycle_year_sr'] = [
      '#type' => 'fieldset',
      '#title' => 'SCHEDULE RELEASE',
      '#weight' => '0',
      ];

      $form['audit_cycle_other'] = [
      '#type' => 'fieldset',
      '#title' => 'OTHER',
      '#weight' => '0',
      ];

      $form['audit_cycle_year'][] = $form['field_cycle_type'];
      $form['audit_cycle_year'][] = $form['field_financial_dates'];
      $form['audit_cycle_year'][] = $form['field_calendar_date'];
      $form['audit_cycle_year_sr'][] = $form['field_schedule_release'];
      $form['audit_cycle_other'][] = $form['field_other'];
      unset($form['field_cycle_type']);
      unset($form['field_financial_dates']);
      unset($form['field_calendar_date']);
      unset($form['field_schedule_release']);
      unset($form['field_other']);
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'audit_cycle_redirect';
        }
      }
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'time_cycle_config_redirect';
        }
      }
	}

  if($form_id == 'node_internal_audit_form'){
    $form['field_further_actions']['#access'] = FALSE;
    $form['field_root_cause_analysis']['#access'] = FALSE;
    $form['field_significant_findings']['#access'] = FALSE;
    $form['field_summary']['#access'] = FALSE;

    $form['field_upload_auditee_signatures']['#access'] = FALSE;
    $form['field_upload_auditor_signatures']['#access'] = FALSE;
    $form['field_upload_hod_signatures']['#access'] = FALSE;
    $form['field_upload_qms_signatures']['#access'] = FALSE;
    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'internal_audit_redirect';
        }
      }
  }
  elseif ($form_id == 'node_internal_audit_edit_form') {
    $form['field_further_actions']['#access'] = FALSE;
    $form['field_root_cause_analysis']['#access'] = FALSE;
    $form['field_significant_findings']['#access'] = FALSE;
    $form['field_summary']['#access'] = FALSE;

    $form['field_upload_auditee_signatures']['#access'] = FALSE;
    $form['field_upload_auditor_signatures']['#access'] = FALSE;
    $form['field_upload_hod_signatures']['#access'] = FALSE;
    $form['field_upload_qms_signatures']['#access'] = FALSE;
  }

  if($form_id == 'audit_criteria_process_process_edit_form'){
    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'process_redirect';
        }
      }
  }   

  if($form_id == 'audit_criteria_product_product_edit_form'){
    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'product_redirect';
        }
    }
  }

  if($form_id == 'node_answers_form'){
    $form['field_answer_type']['#access'] = FALSE;
    if($user_role == 'auditor' || $user_role == 'auditee'){
      $form['field_add_to_checklist']['#access'] = FALSE;
    }
    unset($form['revision_log']);
    unset($form['revision_information']);
    unset($form['field_defined_option_yes_no']['widget']['add_more']);
    unset($form['field_defined_options_default']['widget']['add_more']);
    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'submit_delta_q';
        }
    }
  }
  else{
    $form['field_answer_type']['#access'] = FALSE;
    if($user_role == 'auditor' || $user_role == 'auditee'){
      $form['field_add_to_checklist']['#access'] = FALSE;
    }
    unset($form['revision_log']);
    unset($form['revision_information']);
    unset($form['field_defined_option_yes_no']['widget']['add_more']);
    unset($form['field_defined_options_default']['widget']['add_more']);
  }
}

/**
 * Implements Callbacks for Audit criteria Settings.
 */
function system_config_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $audit_criteria_query = \Drupal::entityQuery('audit_criteria');
  $audit_criteria_query->condition('field_unit_reference', $unit_reference);
  $audit_criteria_id = $audit_criteria_query->execute();
  $response = Url::fromUserInput('/audit_criteria/'.key($audit_criteria_id).'/edit?type=edit&unit_reference='.$unit_reference);
  $messenger = \Drupal::messenger();
  $messenger->addMessage('Settings Saved Successfully.', $messenger::TYPE_STATUS);
  $form_state->setRedirectUrl($response);
}

function external_config_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $audit_criteria_external = \Drupal::entityQuery('audit_criteria_external');
  $audit_criteria_external->condition('field_unit_reference', $unit_reference);
  $audit_criteria_external_id = $audit_criteria_external->execute();
  $response = Url::fromUserInput('/audit_criteria_external/'.key($audit_criteria_external_id).'/edit?type=edit&unit_reference='.$unit_reference);
  $messenger = \Drupal::messenger();
  $messenger->addMessage('Settings Saved Successfully.', $messenger::TYPE_STATUS);
  $form_state->setRedirectUrl($response);
}

function customer_config_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $audit_criteria_customer = \Drupal::entityQuery('audit_criteria_customer');
  $audit_criteria_customer->condition('field_unit_reference', $unit_reference);
  $audit_criteria_customer_id = $audit_criteria_customer->execute();
  $response = Url::fromUserInput('/audit_criteria_customer/'.key($audit_criteria_customer_id).'/edit?type=edit&unit_reference='.$unit_reference);
  $messenger = \Drupal::messenger();
  $messenger->addMessage('Settings Saved Successfully.', $messenger::TYPE_STATUS);
  $form_state->setRedirectUrl($response);
}

function supplier_config_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $audit_criteria_supplier = \Drupal::entityQuery('audit_criteria_supplier');
  $audit_criteria_supplier->condition('field_unit_reference', $unit_reference);
  $audit_criteria_supplier_id = $audit_criteria_supplier->execute();
  $response = Url::fromUserInput('/audit_criteria_supplier/'.key($audit_criteria_supplier_id).'/edit?type=edit&unit_reference='.$unit_reference);
  $messenger = \Drupal::messenger();
  $messenger->addMessage('Settings Saved Successfully.', $messenger::TYPE_STATUS);
  $form_state->setRedirectUrl($response);
}

function score_config_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $audit_criteria_score = \Drupal::entityQuery('audit_criteria_score');
  $audit_criteria_score->condition('field_unit_reference', $unit_reference);
  $audit_criteria_score_id = $audit_criteria_score->execute();
  $response = Url::fromUserInput('/audit_criteria_score/'.key($audit_criteria_score_id).'/edit?type=edit&unit_reference='.$unit_reference);
  $messenger = \Drupal::messenger();
  $messenger->addMessage('Settings Saved Successfully.', $messenger::TYPE_STATUS);
  $form_state->setRedirectUrl($response);
}

function time_cycle_config_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $unit_reference = \Drupal::request()->query->get('unit_reference');
  $audit_cycle= \Drupal::entityQuery('audit_cycle');
  $audit_cycle->condition('field_unit_reference', $unit_reference);
  $audit_cycle_id = $audit_cycle->execute();
  $response = Url::fromUserInput('/audit_cycle/'.key($audit_cycle_id).'/edit?type=edit&unit_reference='.$unit_reference);

  $form_state->setRedirectUrl($response);
}

/**
 * Implements  hook_preprocess_page().
 */
function aps_audit_criteria_preprocess_page(&$variables) {
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if ($current_uri == 'audit_criteria/1/edit') {
    $variables['#attached']['library'][] = 'aps_audit_criteria/aps_audit_general_js';
  }
}

function aps_audit_criteria_inline_entity_form_entity_form_alter(&$entity_form, &$form_state, $context) {
  $entity_form['title']['widget'][0]['value']['#default_value'] = 'Add a title Here';
  $entity_form['field_answer_type']['#access'] = FALSE;
  $entity_form['field_add_to_checklist']['#access'] = FALSE;
  $entity_form['field_select_query_type']['widget']['#default_value'] = '_none';
  
  $entity_form['field_select_query_type']['widget']['#ajax'] = [
    'callback' => 'resetForm',
    'wrapper' => 'section',
    'event' => 'change',
  ];
  $entity_form['field_defined_option_yes_no']['#attributes'] = ['id' => ['yes-no']];
  $entity_form['field_defined_options_default']['#attributes'] = ['id' => ['predefined']];
  $entity_form['field_defined_options_default']['widget']['add_more']['add_more_button_internal_audit_qa']['#attributes'] = ['class' => ['add-pdef']];
  $entity_form['field_defined_option_yes_no']['widget']['add_more']['add_more_button_new_sub_question_yes_no']['#attributes'] = ['class' => ['add-yes']];
// kint($entity_form['field_defined_option_yes_no']);
  $entity_form['field_defined_options_default']['widget'][0]['subform']['field_sub_s_no_']['widget'][0]['value']['#default_value'] = $entity_form['#ief_row_delta'];
  $entity_form['field_defined_option_yes_no']['widget']['#states'] = [
    'visible' => [
      'input[name="field_queries['.$entity_form['#ief_row_delta'].'][inline_entity_form][field_select_query_type]"]' => ['value' => 'Yes']
    ],
    // 'disabled' => [
    //   ['input[name="field_queries['.$entity_form['#ief_row_delta'].'][inline_entity_form][field_select_query_type]"]' => ['value' => 'Pdef']]
    //   ,'or',
    //   ['input[name="field_queries['.$entity_form['#ief_row_delta'].'][inline_entity_form][field_select_query_type]"]' => ['value' => '_none']]
    // ],
  ];

  $entity_form['field_defined_options_default']['widget']['#states'] = [
    'visible' => [
      'input[name="field_queries['.$entity_form['#ief_row_delta'].'][inline_entity_form][field_select_query_type]"]' => ['value' => 'Pdef']
    ],
    // 'disabled' => [
    //   ['input[name="field_queries['.$entity_form['#ief_row_delta'].'][inline_entity_form][field_select_query_type]"]' => ['value' => 'Yes']]
    //   ,'or',
    //   ['input[name="field_queries['.$entity_form['#ief_row_delta'].'][inline_entity_form][field_select_query_type]"]' => ['value' => '_none']]
    // ],
  ];
}

function resetForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $ajax_response = new AjaxResponse();
  $form_values = $form_state->getUserInput();
  $ajax_response->addCommand(new InvokeCommand('.add-pdef', 'val' , ['Add New Sub Question Predefined']));
  $ajax_response->addCommand(new InvokeCommand('.add-yes', 'val' , ['Add New Sub Question Yes/no']));
  return $ajax_response;
}

/**
 * Implements  hook_field_widget_form_alter().
 */
function aps_audit_criteria_field_widget_address_default_form_alter(&$element, &$form_state, $context) {
  $element['#type'] = 'fieldset';
}

/**
 * Implements  hook_field_widget_form_alter().
 */
function aps_audit_criteria_field_widget_datetime_default_form_alter(&$element, &$form_state, $context) {
  $element['value']['#attributes'] = [
        'min' =>  date('Y-m-d'),
    ];
}

function aps_audit_criteria_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  $content_type = explode('?', $uri[2]);
  $field_definition = $context['items']->getFieldDefinition();
  if($field_definition->getName() == 'field_defined_option_yes_no'){
     $key_yes_no = $context['form']['#parents'][1];
     $widget_state_yes_no = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $field_definition->getName(), $form_state);
     $paragraph_instance_yes_no = $widget_state_yes_no['paragraphs'][$element['#delta']]['entity'];
     $paragraph_type_yes_no = $paragraph_instance_yes_no->bundle();
      if($paragraph_type_yes_no == 'new_sub_question_yes_no'){
        if($route_name == 'node.add' && $content_type[0] == 'internal_audit'){
          $element['subform']['field_selected_value']['#access'] = FALSE;
          $element['subform']['field_evidence']['#access'] = FALSE;
          $element['subform']['field_kpi_status']['#access'] = FALSE;
          $element['subform']['field_total_score']['#access'] = FALSE;
          $element['subform']['field_checked']['#access'] = FALSE;
        }
        $element['subform']['field_s_no']['widget'][0]['value']['#default_value'] = $key_yes_no;
      }
  }

  if($field_definition->getName() == 'field_defined_options_default'){
    $key_pdef = $context['form']['#parents'][1];
    $widget_state_pdef = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $field_definition->getName(), $form_state);
    $paragraph_instance_pdef = $widget_state_pdef['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type_pdef = $paragraph_instance_pdef->bundle();
    if($paragraph_type_pdef == 'internal_audit_qa'){
      $element['subform']['field_answers_poor']['widget'][0]['value']['#placeholder'] = 'POOR';
      $element['subform']['field_answer_optimised']['widget'][0]['value']['#placeholder'] = 'OPTIMISED';
      $element['subform']['field_answer_qualified']['widget'][0]['value']['#placeholder'] = 'QUALIFIED';
      $element['subform']['field_answers_defined']['widget'][0]['value']['#placeholder'] = 'EFFECIENT';
      $element['subform']['field_answers_poor']['#disabled'] = TRUE;
      $element['subform']['field_answer_optimised']['#disabled'] = TRUE;
      $element['subform']['field_answer_qualified']['#disabled'] = TRUE;
      $element['subform']['field_answers_defined']['#disabled'] = TRUE;
      if($route_name == 'node.add' && $content_type[0] == 'internal_audit'){
        $element['subform']['field_clause_no']['#access'] = FALSE;
        $element['subform']['field_evidence']['#access'] = FALSE;
        $element['subform']['field_finding_categories']['#access'] = FALSE;
        $element['subform']['field_kpi_status']['#access'] = FALSE;
        $element['subform']['field_total_score']['#access'] = FALSE;
        $element['subform']['field_checked']['#access'] = FALSE;
      }

      $element['subform']['field_sub_s_no_']['widget'][0]['value']['#default_value'] = $element['#delta'];
    }
  }

  if($field_definition->getName() == 'field_audit_list'){
    $key_pdef = $context['form']['#parents'][1];
    $widget_state_pdef = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $field_definition->getName(), $form_state);
    $paragraph_instance_pdef = $widget_state_pdef['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type_pdef = $paragraph_instance_pdef->bundle();
    if($paragraph_type_pdef == 'audit_report'){
      $element['subform']['field_clause']['#access'] = FALSE;
      $element['subform']['field_clause_no']['#access'] = FALSE;
      $element['subform']['field_car_status']['#access'] = FALSE;
    }
  }
}

/**  
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().  
 */  
function aps_audit_criteria_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'supplier_manufactured_product' || $element['#paragraph_type'] == 'supplier_service_product') {
    unset($element['top']['links']['remove_button']);
  }

  if ($element['#paragraph_type'] == 'supplier_product_type') {
    $element['subform']['field_product_type']['widget']['#ajax'] = [
      'callback' => 'resetFormdata',
      'event' => 'change',
    ];
    $element['subform']['field_manufactured_product']['widget'][0]['subform']['field_manufactured_product_id']['#attributes'] = ['id' => ['manufactured'.$element['#delta']]];
    $element['subform']['field_manufactured_product']['widget'][0]['subform']['field_manufactured_product_name']['#attributes'] = ['id' => ['product'.$element['#delta']]];
    $element['subform']['field_service_product']['widget'][0]['subform']['field_service_part_name']['#attributes'] = ['id' => ['service-name'.$element['#delta']]];

    $element['subform']['field_manufactured_product']['#states'] = [
      'visible' => [
        'select[name="field_add_products['.$element['#delta'].'][subform][field_product_type]"]' => ['value' => 'manufactured'],
      ],
      'disabled' => [
        'select[name="field_add_products['.$element['#delta'].'][subform][field_product_type]"]' => ['value' => 'service'],
      ],
    ];

    $element['subform']['field_service_product']['#states'] = [
      'visible' => [
        'select[name="field_add_products['.$element['#delta'].'][subform][field_product_type]"]' => ['value' => 'service'],
      ],
      'disabled' => [
        'select[name="field_add_products['.$element['#delta'].'][subform][field_product_type]"]' => ['value' => 'manufactured'],
      ],
    ];
  }
  
  if ($element['#paragraph_type'] == 'business_process_effectiveness' || $element['#paragraph_type'] == 'business_process_effieciency') {
    unset($element['top']['links']['remove_button']);
  }
}

function resetFormdata(&$element, &$form_state, $context){
  $ajax_response = new AjaxResponse();
  $form_values = $form_state->getUserInput();
  foreach ($form_values['field_add_products'] as $i => $j) {
    if($form_values['field_add_products'][$i]['subform']['field_product_type'] == 'service'){
      $ajax_response->addCommand(new InvokeCommand('#manufactured'.$i.' input', 'val' , ['']));
      $ajax_response->addCommand(new InvokeCommand('#product'.$i.' input', 'val' , ['']));
    }
    elseif ($form_values['field_add_products'][$i]['subform']['field_product_type'] == 'manufactured') {
      $ajax_response->addCommand(new InvokeCommand('#service-name'.$i.' input', 'val' , ['']));
    }

  }
  return $ajax_response;
}

/**
 * Callback to get terms.
 */
function getVids($vid, $parent_id){
  $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parent_id);
  $term_data = [];
  foreach ($terms as $term) {
    $term_data[$term->tid] = $term->name;
  }
  return $term_data;
}

/**
 * Callback method after audit cycle form submits.
 */
function audit_cycle_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after audit cycle form submits.
 */
function internal_audit_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/internal-audit-list');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after audit cycle form submits.
 */
function process_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/audit_criteria/1/edit');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after audit cycle form submits.
 */
function product_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/audit_criteria/1/edit');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after Add delta Q form submits.
 */
function submit_delta_q(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  global $base_url;
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $query_parameters = UrlHelper::parse($current_uri);
  $uri = explode('=', $query_parameters['query']['destination']);
  $id = $uri[1];
  $node_object = Node::load($id);
  $get_owner_id = $node_object->getOwner()->id();
  $uid = \Drupal::currentUser()->id();
  $current_user_detail = User::load($uid);
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $get_stored_entity = [];
  if($node_object->hasField('field_queries')){
    $get_stored_entity = $node_object->get('field_queries')->getValue();
    $target_node = Node::load($nid);
    $get_stored_entity[] = ['target_id' => $nid];
    $node_object->set('field_queries', $get_stored_entity);
    $target_node->set('field_answer_type', 'delta');
    $target_node->set('field_add_to_checklist', 'no');
    $node_object->save();
    $target_node->save();
    $link = $base_url.Url::fromRoute('entity.node.edit_form',['node' => $nid])->toString();
    $action_link = '<a href='.$link.'>Link</a>';
    $message = 'Delta-Q has been requested to add to the following Audit by <b>'.$current_user_detail->name->value.'</b><br> Follow the Audit action link.'.$action_link;
    notify($get_owner_id, $nid, $message);
  }
  $destination = \Drupal::request()->query->get('destination');
  $response = Url::fromUserInput('/'.$destination);
  $form_state->setRedirectUrl($response);
}
