<?php

/**
 * @file
 * Contains aps_audit_criteria.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\UrlHelper;

/**
 * Implements hook_help().
 */
function aps_audit_criteria_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the aps_audit_criteria module.
    case 'help.page.aps_audit_criteria':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Contain geenral settings for audit criteria') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function aps_audit_criteria_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'audit_criteria_process_process_form') {
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_unit_reference']['#access'] = FALSE;
  }
  elseif ($form_id == 'audit_criteria_process_process_edit_form') {
    $form['field_unit_reference']['#access'] = FALSE;
  }

  if ($form_id == 'audit_criteria_product_product_form') {
    if($id= \Drupal::request()->query->get('unit_reference')){
      $node_object = Node::load($id);
      $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
    }
    $form['field_unit_reference']['#access'] = FALSE;
  }
  elseif ($form_id == 'audit_criteria_product_product_edit_form') {
    $form['field_unit_reference']['#access'] = FALSE;
  }
	if($form_id == 'audit_criteria_systems_form' || $form_id == 'audit_criteria_systems_edit_form'){
    if ($form_id == 'audit_criteria_systems_form') {
      if($id= \Drupal::request()->query->get('unit_reference')){
        $node_object = Node::load($id);
        $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
      }
    }
   if($form_id == 'audit_criteria_systems_form' || $form_id == 'audit_criteria_systems_edit_form'){
      $form['field_unit_reference']['#access'] = FALSE;
    }
	  $options_document = getVids('system_documents', 27);
	  $options_records = getVids('system_documents', 28);
	  $options_score = getVids('system_documents', 31);
	  if(count($options_document)){
	  	 $form['field_documents']['widget']['#options'] = $options_document;
	  }

	  if(count($options_records)){
	  	 $form['field_records']['widget']['#options'] = $options_records;
	  } 

	  if(count($options_score)){
	  	 $form['field_score_settings']['widget']['#options'] = $options_score;
	  } 

	  $form['customer_audit'] = [
      '#type' => 'fieldset',
      '#title' => 'CUSTOMER AUDIT',
      '#weight' => '20',
      ];

      $form['customer_audit'][] = $form['field_customer_audit'];

      $form['field_score_level_set']['#states'] = [
      'visible' => [
        '#edit-field-score-settings-32' => ['checked' => TRUE],
        ],
      ];

      $form['field_score_level_set']['#states'] = [
      'invisible' => [
        '#edit-field-score-settings-32' => ['checked' => FALSE],
        ],
      ];

      $form['field_score_level_set_100']['#states'] = [
      'visible' => [
        '#edit-field-score-settings-33' => ['checked' => TRUE],
        ],
      ];

      $form['field_score_level_set_100']['#states'] = [
      'invisible' => [
        '#edit-field-score-settings-33' => ['checked' => FALSE],
        ],
      ];
      
      unset($form['field_customer_audit']);
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'audit_criteria_redirect';
        }
      }
	}
  elseif (condition) {
    # code...
  }

	if($form_id == 'audit_cycle_settings_form' || $form_id == 'audit_cycle_settings_edit_form'){
    $form['field_unit_reference']['#access'] = FALSE;
    if ($form_id == 'audit_cycle_settings_form') {
      if($id= \Drupal::request()->query->get('unit_reference')){
        $node_object = Node::load($id);
        $form['field_unit_reference']['widget'][0]['target_id']['#default_value'] = $node_object;
      }
      $form['field_unit_reference']['#access'] = FALSE;
    }
	  $form['#attached']['library'][] = 'aps_audit_criteria/aps_audit_criteria_js';

      $form['audit_cycle_year'] = [
      '#type' => 'fieldset',
      '#title' => 'YEAR',
      '#weight' => '0',
      ];

      $form['audit_cycle_year_sr'] = [
      '#type' => 'fieldset',
      '#title' => 'SCHEDULE RELEASE',
      '#weight' => '0',
      ];

      $form['audit_cycle_other'] = [
      '#type' => 'fieldset',
      '#title' => 'OTHER',
      '#weight' => '0',
      ];

      $form['audit_cycle_year'][] = $form['field_cycle_type'];
      $form['audit_cycle_year'][] = $form['field_financial_dates'];
      $form['audit_cycle_year'][] = $form['field_calendar_date'];
      $form['audit_cycle_year_sr'][] = $form['field_schedule_release'];
      $form['audit_cycle_other'][] = $form['field_other'];
      unset($form['field_cycle_type']);
      unset($form['field_financial_dates']);
      unset($form['field_calendar_date']);
      unset($form['field_schedule_release']);
      unset($form['field_other']);
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'audit_cycle_redirect';
        }
      }
	}

  if($form_id == 'node_internal_audit_form'){
    $form['field_further_actions']['#access'] = FALSE;
    $form['field_root_cause_analysis']['#access'] = FALSE;
    $form['field_significant_findings']['#access'] = FALSE;
    $form['field_summary']['#access'] = FALSE;

    $form['field_upload_auditee_signatures']['#access'] = FALSE;
    $form['field_upload_auditor_signatures']['#access'] = FALSE;
    $form['field_upload_hod_signatures']['#access'] = FALSE;
    $form['field_upload_qms_signatures']['#access'] = FALSE;
    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'internal_audit_redirect';
        }
      }
  }
  elseif ($form_id == 'node_internal_audit_edit_form') {
    $form['field_further_actions']['#access'] = FALSE;
    $form['field_root_cause_analysis']['#access'] = FALSE;
    $form['field_significant_findings']['#access'] = FALSE;
    $form['field_summary']['#access'] = FALSE;

    $form['field_upload_auditee_signatures']['#access'] = FALSE;
    $form['field_upload_auditor_signatures']['#access'] = FALSE;
    $form['field_upload_hod_signatures']['#access'] = FALSE;
    $form['field_upload_qms_signatures']['#access'] = FALSE;
  }

  if($form_id == 'audit_criteria_process_process_edit_form'){
    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'process_redirect';
        }
      }
  }   

  if($form_id == 'audit_criteria_product_product_edit_form'){
    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'product_redirect';
        }
    }
  }

  if($form_id == 'node_answers_form'){
    $form['field_answer_type']['#access'] = FALSE;
    $form['field_add_to_checklist']['#access'] = FALSE;
    unset($form['field_defined_option_yes_no']['widget']['add_more']);
    unset($form['field_defined_options_default']['widget']['add_more']);
    foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'submit_delta_q';
        }
    }
  }
  else{
    $form['field_answer_type']['#access'] = FALSE;
    $form['field_add_to_checklist']['#access'] = FALSE;
  }
}

/**
 * Implements  hook_preprocess_page().
 */
function aps_audit_criteria_preprocess_page(&$variables) {
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $uri = explode('/', $current_uri);
  if ($current_uri == 'audit_criteria/1/edit') {
    $variables['#attached']['library'][] = 'aps_audit_criteria/audit_criteria_system_js';
  }
}

function aps_audit_criteria_inline_entity_form_entity_form_alter(&$entity_form, &$form_state, $context) {
  $entity_form['title']['widget'][0]['value']['#default_value'] = 'Add a title Here';
  $entity_form['field_answer_type']['#access'] = FALSE;
  $entity_form['field_add_to_checklist']['#access'] = FALSE;
}

function aps_audit_criteria_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  if($field_definition->getName() == 'field_defined_option_yes_no'){
     $key_yes_no = $context['form']['#parents'][1];
     $widget_state_yes_no = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $field_definition->getName(), $form_state);
     $paragraph_instance_yes_no = $widget_state_yes_no['paragraphs'][$element['#delta']]['entity'];
     $paragraph_type_yes_no = $paragraph_instance_yes_no->bundle();
      if($paragraph_type_yes_no == 'new_sub_question_yes_no'){
        $element['subform']['#states'] = [
          'visible' => [
            'input[name="field_queries['.$key_yes_no.'][inline_entity_form][field_select_query_type]"]' => ['value' => 'Yes']
          ],
        ];
        $element['subform']['field_s_no']['widget'][0]['value']['#default_value'] = $key_yes_no;
      }
  }

  if($field_definition->getName() == 'field_defined_options_default'){
    $key_pdef = $context['form']['#parents'][1];
    $widget_state_pdef = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $field_definition->getName(), $form_state);
    $paragraph_instance_pdef = $widget_state_pdef['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type_pdef = $paragraph_instance_pdef->bundle();
    if($paragraph_type_pdef == 'internal_audit_qa'){
      $element['#states'] = [
        'visible' => [
          'input[name="field_queries['.$key_pdef.'][inline_entity_form][field_select_query_type]"]' => ['value' => 'Pdef']
        ],
      ];
       $element['subform']['field_sub_s_no_']['widget'][0]['value']['#default_value'] = $key_pdef;
    }
  }
}

function aps_audit_criteria_form_paragraphs_subform_alter(array &$subform, \Drupal\Core\Form\FormStateInterface &$form_state, $delta) {
  $paragraph = $form_state->get('paragraph');
  $paragraph_type = $paragraph->getType();
  if($paragraph_type == 'internal_audit_qa'){
    $subform['field_answers_poor']['#disabled'] = TRUE;
    $subform['field_answer_optimised']['#disabled'] = TRUE;
    $subform['field_answer_qualified']['#disabled'] = TRUE;
    $subform['field_answers_defined']['#disabled'] = TRUE;
    // $subform['field_clause_no']['#access'] = FALSE;
  }
  if($paragraph_type == 'audit_report'){
    $subform['field_clause']['#access'] = FALSE;
    $subform['field_clause_no']['#access'] = FALSE;
  }
}

/**  
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().  
 */  
function aps_audit_criteria_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'altered_paragraph') {
    $element['subform']['field_text']['widget'][0]['#title'] = 'Altered title';
  }
}

/**
 * Callback to get terms.
 */
function getVids($vid, $parent_id){
  $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parent_id);
  $term_data = [];
  foreach ($terms as $term) {
    $term_data[$term->tid] = $term->name;
  }
  return $term_data;
}

/**
 * Callback method after audit criteria form submits.
 */
function audit_criteria_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after audit cycle form submits.
 */
function audit_cycle_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after audit cycle form submits.
 */
function internal_audit_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/internal-audit-list');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after audit cycle form submits.
 */
function process_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/audit_criteria/1/edit');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after audit cycle form submits.
 */
function product_redirect(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $response = Url::fromUserInput('/audit_criteria/1/edit');
  $form_state->setRedirectUrl($response);
}

/**
 * Callback method after Add delta Q form submits.
 */
function submit_delta_q(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $current_uri = trim(\Drupal::request()->getRequestUri(), '/');
  $query_parameters = UrlHelper::parse($current_uri);
  $uri = explode('=', $query_parameters['query']['destination']);
  $id = $uri[1];
  $node_object = Node::load($id);
  $form_values = $form_state->getValues();
  $nid = $form_values['nid'];
  $get_stored_entity = [];
  if(count($node_object->get('field_queries')->target_id)){
    $get_stored_entity = $node_object->get('field_queries')->getValue();
    $target_node = Node::load($nid);
    $get_stored_entity[] = ['target_id' => $nid];
    $node_object->set('field_queries', $get_stored_entity);
    $target_node->set('field_answer_type', 'delta');
    $target_node->set('field_add_to_checklist', 'no');
    $node_object->save();
    $target_node->save();
  }
  $destination = \Drupal::request()->query->get('destination');
  $response = Url::fromUserInput('/'.$destination);
  $form_state->setRedirectUrl($response);
}
